@page "/inventory"
@using Microsoft.AspNetCore.Authorization
@using car_lister.Services
@using Microsoft.JSInterop
@using System.Net.Http
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]
@implements IDisposable

<PageTitle>Inventory Search - Car Lister</PageTitle>
<link href="css/inventory.css" rel="stylesheet" />
<script src="js/firestore.js"></script>

<div id="inventory-container" class="inventory-container" @onkeydown="HandleKeyDown" tabindex="0">
    <div class="header">
        <button class="btn-back" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span>
            Back
        </button>
        <h1>Dealer Inventory</h1>
        <p class="subtitle">Select a dealer to view their inventory</p>
    </div>

    <div class="search-section">
        <div class="search-form">
            <div class="form-group">
                <label>Dealer</label>
                <div class="searchable-dropdown @(isDropdownOpen ? "open" : "")" id="searchable-dropdown">
                    <div class="dropdown-trigger" @onclick="ToggleDropdown">
                        <span class="selected-text">@(selectedDealer?.Name ?? "Select a dealer")</span>
                        <span class="oi @(isDropdownOpen ? "oi-chevron-top" : "oi-chevron-bottom")"></span>
                    </div>
                    @if (isDropdownOpen)
                    {
                        <div class="dropdown-content">
                            <div class="search-input-container">
                                <input 
                                    type="text" 
                                    @bind="searchTerm" 
                                    @bind:event="oninput"
                                    @onkeydown="HandleSearchKeyDown"
                                    placeholder="Search dealers..."
                                    class="search-input"
                                    id="search-input"
                                />
                                <span class="oi oi-magnifying-glass search-icon"></span>
                            </div>
                            <div class="dropdown-options" id="dropdown-options">
                                @for (int i = 0; i < filteredDealers.Count; i++)
                                {
                                    var dealer = filteredDealers[i];
                                    var isSelected = availableDealers.IndexOf(dealer) == selectedDealerIndex;
                                    var isHighlighted = i == highlightedIndex;
                                    <div 
                                        class="dropdown-option @(isSelected ? "selected" : "") @(isHighlighted ? "highlighted" : "")"
                                        @onclick="() => SelectDealer(availableDealers.IndexOf(dealer))"
                                    >
                                        @dealer.Name
                                    </div>
                                }
                                @if (!filteredDealers.Any())
                                {
                                    <div class="no-results-option">No dealers found</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group">
                <label>Inventory Type</label>
                <input type="text" value="All Vehicles (New & Used)" readonly class="dealer-display" />
            </div>
            <button class="btn-search" @onclick="SearchInventory" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-small"></span>
                }
                else
                {
                    <span class="oi oi-refresh"></span>
                }
                Load Inventory
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner"></div>
            <p>Loading dealer inventory...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-state">
            <span class="oi oi-warning"></span>
            <p>@errorMessage</p>
            <button class="btn-retry" @onclick="SearchInventory">Try Again</button>
        </div>
    }
    else if (searchResults != null && searchResults.Cars.Any())
    {
        <div class="results-section">
            <div class="results-header">
                <h2>Found @searchResults.Cars.Count cars</h2>
                <div class="pagination-info">
                    Page @searchResults.CurrentPage of @searchResults.TotalPages
                </div>
            </div>

            <div class="cars-grid">
                @foreach (var car in searchResults.Cars)
                {
                    <div class="car-card" @onclick="() => ViewCarDetails(car)">
                        <div class="car-image">
                            @if (car.images != null && car.images.Any())
                            {
                                <img src="@car.images[0]" alt="@car.fullTitle" />
                            }
                            else
                            {
                                <div class="no-image">
                                    <img src="images/coming-soon-placeholder.svg" alt="Coming Soon" />
                                </div>
                            }
                        </div>
                        <div class="car-info">
                            <h3 class="car-title">@car.fullTitle</h3>
                            <div class="car-price">$@car.price.ToString("N0")</div>
                            <div class="car-location">@selectedDealer?.Name</div>
                        </div>
                    </div>
                }
            </div>

            @if (searchResults.TotalPages > 1)
            {
                <div class="pagination">
                    <button class="btn-pagination" @onclick="PreviousPage" disabled="@(searchResults.CurrentPage <= 1)">
                        <span class="oi oi-chevron-left"></span>
                        Previous
                    </button>
                    <div class="page-info">
                        Page @searchResults.CurrentPage of @searchResults.TotalPages
                    </div>
                    <button class="btn-pagination" @onclick="NextPage" disabled="@(searchResults.CurrentPage >= searchResults.TotalPages)">
                        Next
                        <span class="oi oi-chevron-right"></span>
                    </button>
                </div>
            }
        </div>
    }
    else if (hasSearched)
    {
        <div class="no-results">
            <span class="oi oi-search"></span>
            <h3>No cars found</h3>
            <p>Try adjusting your search criteria or expanding your search area.</p>
        </div>
    }
</div>

@code {
    private List<DealerInfo> availableDealers = new()
    {
        new DealerInfo 
        { 
            Name = "Asheboro Chrysler Dodge Jeep Ram", 
            EntityId = "317131", 
            Url = "https://www.cargurus.com/Cars/m-Asheboro-Chrysler-Dodge-Jeep-Ram-sp317131" 
        },
        new DealerInfo 
        { 
            Name = "Flow Honda of Winston Salem", 
            EntityId = "59155", 
            Url = "https://www.cargurus.com/Cars/m-Flow-Honda-of-Winston-Salem-sp59155" 
        }
    };

    private int selectedDealerIndex = 0;
    private DealerInfo? selectedDealer => availableDealers.Count > selectedDealerIndex ? availableDealers[selectedDealerIndex] : null;
    
    private bool isLoading = false;
    private string errorMessage = "";
    private InventorySearchResult? searchResults = null;
    private bool hasSearched = false;
    private bool shouldScrollToTop = false;
    private bool isDropdownOpen = false;
    private string searchTerm = "";
    private int highlightedIndex = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusElement", "inventory-container");
            await JSRuntime.InvokeVoidAsync("addClickOutsideListener", "searchable-dropdown", DotNetObjectReference.Create(this));
        }
        
        if (shouldScrollToTop)
        {
            shouldScrollToTop = false;
            await JSRuntime.InvokeVoidAsync("scrollToResults");
        }
    }

    private void GoBack() => NavigationManager.NavigateTo("/");

    private void OnDealerChanged()
    {
        searchResults = null;
        hasSearched = false;
        errorMessage = "";
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (searchResults?.TotalPages > 1)
        {
            switch (e.Key)
            {
                case "ArrowLeft" when searchResults.CurrentPage > 1:
                    await PreviousPage();
                    break;
                case "ArrowRight" when searchResults.CurrentPage < searchResults.TotalPages:
                    await NextPage();
                    break;
            }
        }
    }

    private async Task SearchInventory() => await SearchPage(1);

    private async Task PreviousPage()
    {
        if (searchResults?.CurrentPage > 1)
        {
            await SearchPage(searchResults.CurrentPage - 1);
        }
    }

    private async Task NextPage()
    {
        if (searchResults?.CurrentPage < searchResults.TotalPages)
        {
            await SearchPage(searchResults.CurrentPage + 1);
        }
    }

    private async Task SearchPage(int pageNumber)
    {
        if (selectedDealer == null)
        {
            errorMessage = "Please select a dealer";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";
            hasSearched = true;
            StateHasChanged();

            using var httpClient = new HttpClient();
            var baseUrl = NavigationManager.BaseUri.Contains("localhost") 
                ? "http://localhost:8000" 
                : "https://car-lister-api.onrender.com";
            
            httpClient.BaseAddress = new Uri(baseUrl);
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            var request = new
            {
                dealerEntityId = selectedDealer.EntityId,
                dealerName = selectedDealer.Name,
                dealerUrl = selectedDealer.Url,
                pageNumber = pageNumber
            };

            var response = await httpClient.PostAsJsonAsync("/api/dealer/inventory", request);
            
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                searchResults = JsonSerializer.Deserialize<InventorySearchResult>(jsonString, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (searchResults != null && !searchResults.Success)
                {
                    errorMessage = searchResults.ErrorMessage ?? "Search failed. Please try again.";
                }
            }
            else
            {
                errorMessage = $"Search failed with status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching inventory: {ex.Message}";
            Console.WriteLine($"Error in SearchPage: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            shouldScrollToTop = searchResults?.Success == true;
            StateHasChanged();
        }
    }

    private async Task ViewCarDetails(ScrapedCar car)
    {
        if (!string.IsNullOrEmpty(car.originalUrl))
        {
            await JSRuntime.InvokeVoidAsync("open", car.originalUrl, "_blank");
        }
    }

    private async Task ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
        if (isDropdownOpen)
        {
            highlightedIndex = -1;
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("focusElement", "search-input");
        }
    }

    private async Task HandleSearchKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (highlightedIndex >= 0 && highlightedIndex < filteredDealers.Count)
                {
                    SelectDealer(availableDealers.IndexOf(filteredDealers[highlightedIndex]));
                }
                else if (filteredDealers.Any())
                {
                    SelectDealer(availableDealers.IndexOf(filteredDealers[0]));
                }
                else
                {
                    isDropdownOpen = false;
                }
                break;
                
            case "ArrowDown":
                if (filteredDealers.Any())
                {
                    highlightedIndex = Math.Min(highlightedIndex + 1, filteredDealers.Count - 1);
                    await ScrollToHighlighted();
                }
                break;
                
            case "ArrowUp":
                if (filteredDealers.Any())
                {
                    highlightedIndex = Math.Max(highlightedIndex - 1, 0);
                    await ScrollToHighlighted();
                }
                break;
                
            case "Escape":
                isDropdownOpen = false;
                highlightedIndex = -1;
                StateHasChanged();
                break;
        }
    }

    private async Task ScrollToHighlighted()
    {
        StateHasChanged();
        await Task.Delay(10);
        await JSRuntime.InvokeVoidAsync("scrollToHighlightedOption", "dropdown-options", highlightedIndex);
    }

    private List<DealerInfo> filteredDealers => string.IsNullOrEmpty(searchTerm) 
        ? availableDealers 
        : availableDealers.Where(d => d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SelectDealer(int index)
    {
        selectedDealerIndex = index;
        searchTerm = "";
        isDropdownOpen = false;
        highlightedIndex = -1;
        OnDealerChanged();
        StateHasChanged();
    }

    [JSInvokable]
    public void OnClickOutside()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;
            searchTerm = "";
            highlightedIndex = -1;
            StateHasChanged();
        }
    }

    public void Dispose() { }

    public class DealerInfo
    {
        public string Name { get; set; } = "";
        public string EntityId { get; set; } = "";
        public string Url { get; set; } = "";
    }

    public class InventorySearchResult
    {
        public bool Success { get; set; }
        public List<ScrapedCar> Cars { get; set; } = new();
        public int TotalResults { get; set; }
        public int CurrentPage { get; set; }
        public int TotalPages { get; set; }
        public string? ErrorMessage { get; set; }
        public double ProcessingTime { get; set; }
    }

    public class ScrapedCar
    {
        public string make { get; set; } = "";
        public string model { get; set; } = "";
        public int year { get; set; }
        public double price { get; set; }
        public string description { get; set; } = "";
        public List<string> features { get; set; } = new();
        public List<object> stats { get; set; } = new();
        public List<string> images { get; set; } = new();
        public string originalUrl { get; set; } = "";
        public string fullTitle { get; set; } = "";
        public DateTime scrapedAt { get; set; }
    }
} 