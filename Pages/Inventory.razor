@page "/inventory"
@using Microsoft.AspNetCore.Authorization
@using car_lister.Services
@using car_lister.Models
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject ClientService ClientService
@inject InventoryService InventoryService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Inventory - Car Lister</PageTitle>
<link href="css/workflow.css" rel="stylesheet" />
<link href="css/inventory.css" rel="stylesheet" />
<script src="js/firestore.js"></script>

<div class="onboarding-container">
    <div class="header">
        <button class="btn-back" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span>
            Back
        </button>
        <h1>Inventory</h1>
        <p class="subtitle">Select a client to view their inventory</p>
    </div>

    <div class="content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Loading inventory...</p>
            </div>
        }
        else
        {
            <div class="step-content client-setup">
                <div class="form-container mb-2">
                    <div class="form-group">
                        <label for="client-select">Client</label>
                        <div class="dropdown w-100">
                            <select id="client-select" class="form-control" @bind="selectedClientId" @bind:after="OnClientSelectionChanged">
                                <option value="">Select client</option>
                                @foreach (var client in clients)
                                {
                                    <option value="@client.Id">@client.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    @* TODO: Add quick filters (status, price range, body style, etc.) *@
                    @* TODO: Add search input to filter by VIN/stock/title *@
                </div>

                @if (!string.IsNullOrEmpty(selectedClientId))
                {
                    <div class="results-section mt-1">
                        <div class="results-header mt-1">
                            <h2>@(cars?.Count ?? 0) vehicles</h2>
                            <div class="pagination-info">@selectedClient?.Name</div>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="error-state">
                                <span class="oi oi-warning"></span>
                                <p>@errorMessage</p>
                            </div>
                        }
                        else if (cars == null || cars.Count == 0)
                        {
                            <div class="no-results">
                                <span class="oi oi-list"></span>
                                <h3>No vehicles in inventory</h3>
                                <p>Once vehicles are added, they will appear here.</p>
                            </div>
                        }
                        else
                        {
                            <div class="cars-grid">
                                @foreach (var car in cars)
                                {
                                    <div class="car-card">
                                        <div class="car-image" @onclick="() => OpenListing(car)">
                                            @if (car.Images != null && car.Images.Any())
                                            {
                                                <img src="@car.Images[0]" alt="@(!string.IsNullOrWhiteSpace(car.FullTitle) ? car.FullTitle : $"{car.Year} {car.Make} {car.Model}")" />
                                            }
                                            else
                                            {
                                                <div class="no-image">
                                                    <img src="images/coming-soon-placeholder.svg" alt="Coming Soon" />
                                                </div>
                                            }
                                        </div>
                                        <div class="car-info">
                                            <h3 class="car-title">@(!string.IsNullOrWhiteSpace(car.FullTitle) ? car.FullTitle : $"{car.Year} {car.Make} {car.Model}")</h3>
                                            <div class="car-price">$@car.Price.ToString("N0")</div>
                                            <div class="car-location">@selectedClient?.Name</div>
                                        </div>
                                        <div class="car-details">
                                            <div class="detail-row"><strong>VIN:</strong> @car.VIN</div>
                                            <div class="detail-row"><strong>Stock #:</strong> @car.StockNumber</div>
                                            <div class="detail-row"><strong>Mileage:</strong> @car.Mileage.ToString("N0")</div>
                                            <div class="detail-row"><strong>Exterior:</strong> @car.ExteriorColor</div>
                                            <div class="detail-row"><strong>Interior:</strong> @car.InteriorColor</div>
                                            <div class="detail-row"><strong>Body:</strong> @car.BodyStyle</div>
                                            <div class="detail-row"><strong>Condition:</strong> @car.Condition</div>
                                            <div class="detail-row"><strong>Transmission:</strong> @car.Transmission</div>
                                            <div class="detail-row"><strong>Drivetrain:</strong> @car.Drivetrain</div>
                                            <div class="detail-row"><strong>Engine:</strong> @car.Engine</div>
                                            <div class="detail-row"><strong>Fuel:</strong> @car.FuelType</div>
                                            <div class="detail-row"><strong>MSRP:</strong> $@car.MSRP.ToString("N0")</div>
                                            <div class="detail-row"><strong>Market Days:</strong> @car.MarketDays</div>
                                            <div class="detail-row"><strong>Data Source:</strong> @car.DataSource</div>
                                            <div class="detail-row"><strong>Scraped At:</strong> @car.ScrapedAt.ToString("g")</div>
                                        </div>
                                        <div class="card-actions">
                                            <button class="btn btn-outline" @onclick="() => OpenListing(car)">Open Listing</button>
                                            <button class="btn btn-outline" disabled>@* TODO: Edit vehicle *@ Edit</button>
                                            <button class="btn btn-outline" disabled>@* TODO: Manage photos *@ Photos</button>
                                        </div>
                                    </div>
                                }
                            </div>

                            @* TODO: Add pagination/virtualization for large inventories *@
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Client> clients = new List<Client>();
    private string selectedClientId = string.Empty;
    private Client? selectedClient = null;
    private List<ScrapedCar> cars = new List<ScrapedCar>();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        try
        {
            isLoading = true;
            clients = await ClientService.GetAllClientsAsync();
            clients = clients.OrderBy(c => c.Name).ToList();

            // Auto-select first client (if any) and load inventory
            if (clients.Count > 0)
            {
                selectedClientId = clients.First().Id;
                selectedClient = clients.First();
                await LoadInventoryAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading clients: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadInventoryAsync()
    {
        if (string.IsNullOrEmpty(selectedClientId))
        {
            cars = new List<ScrapedCar>();
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            cars = await InventoryService.GetClientInventoryAsync(selectedClientId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading inventory: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnClientSelectionChanged()
    {
        selectedClient = clients.FirstOrDefault(c => c.Id == selectedClientId);
        _ = LoadInventoryAsync();
    }

    private async Task OpenListing(ScrapedCar car)
    {
        var url = !string.IsNullOrWhiteSpace(car.OriginalUrl) ? car.OriginalUrl : car.ListingUrl;
        if (!string.IsNullOrWhiteSpace(url))
        {
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
