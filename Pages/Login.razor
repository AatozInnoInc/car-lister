@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using todo_pwa.Services
@inject FirebaseService FirebaseService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - Space Tasks</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="login-page">
    <div class="login-content">
        <div class="app-logo">
            <img src="images/Cow in Space with Flaming CRT.png" alt="Space Tasks Logo" />
        </div>
        <div class="login-container">
            <div class="login-header">
                <h1>Space Tasks</h1>
                <p>Your cosmic task manager</p>
            </div>
            
            <div class="security-message">
                <span class="oi oi-lock-locked"></span>
                <p>Your data is secure and never shared with anyone</p>
            </div>

            <div class="terms-section">
                <label class="terms-checkbox">
                    <input type="checkbox" @bind="termsAccepted" />
                    <span>I agree to the <a href="/terms-of-service">Terms of Service</a></span>
                </label>
            </div>

            @if (isLoading)
            {
                <button class="google-signin-button" disabled>
                    <div class="loading-spinner"></div>
                </button>
            }
            else
            {
                <button class="google-signin-button" @onclick="SignInWithGoogle" disabled="@(!termsAccepted)">
                    <svg class="google-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
                        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"/>
                        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"/>
                        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"/>
                        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"/>
                    </svg>
                    Continue with Google
                </button>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            <div class="privacy-links">
                <a href="/privacy-policy">Privacy Policy</a>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private bool termsAccepted = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SignInWithGoogle()
    {
        if (!termsAccepted)
        {
            errorMessage = "Please accept the Terms of Service to continue.";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var success = await FirebaseService.SignInWithGoogle();
            
            if (success)
            {
                ((FirebaseAuthenticationStateProvider)AuthStateProvider).NotifyAuthenticationStateChanged();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Failed to sign in with Google. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during sign in. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
} 