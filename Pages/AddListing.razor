@page "/add-listing"
@using Microsoft.AspNetCore.Authorization
@using car_lister.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Add New Listing - Car Lister</PageTitle>
<link href="css/addlisting.css" rel="stylesheet" />

<div class="add-listing-container">
    <div class="header">
        <button class="btn-back" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span>
            Back
        </button>
        <h1>Add New Car Listing</h1>
        <p class="subtitle">Scrape car details from CarGurus.com</p>
    </div>

    <div class="content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Scraping car details...</p>
            </div>
        }
        else if (scrapedCar != null)
        {
            <div class="car-preview">
                @if (scrapedCar.Images != null && scrapedCar.Images.Any())
                {
                    <div class="image-gallery-container">
                        <div class="main-image-container">
                            <img src="@scrapedCar.Images[currentImageIndex]" alt="@scrapedCar.Make @scrapedCar.Model" class="main-image" />
                            @if (scrapedCar.Images.Count > 1)
                            {
                                <div class="image-navigation">
                                    <button class="nav-btn prev" @onclick="PreviousImage" disabled="@(currentImageIndex == 0)">
                                        <span class="oi oi-chevron-left"></span>
                                    </button>
                                    <div class="image-counter">
                                        @(currentImageIndex + 1) of @scrapedCar.Images.Count
                                    </div>
                                    <button class="nav-btn next" @onclick="NextImage" disabled="@(currentImageIndex == scrapedCar.Images.Count - 1)">
                                        <span class="oi oi-chevron-right"></span>
                                    </button>
                                </div>
                            }
                        </div>
                        
                        @if (scrapedCar.Images.Count > 1)
                        {
                            <div class="thumbnail-scroll">
                                <div class="thumbnail-container">
                                    @for (int i = 0; i < scrapedCar.Images.Count; i++)
                                    {
                                        var index = i;
                                        <div class="thumbnail-wrapper @(index == currentImageIndex ? "active" : "")" @onclick="() => SelectImage(index)">
                                            <img src="@scrapedCar.Images[i]" alt="Car image @(i + 1)" class="thumbnail" />
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                
                <div class="car-details">
                    <div class="car-header">
                        <div class="car-title">
                            <h2>@scrapedCar.FullTitle</h2>
                            <div class="car-badge">@scrapedCar.Year</div>
                        </div>
                        <div class="price-container">
                            <div class="price">$@scrapedCar.Price.ToString("N0")</div>
                            <div class="price-label">Listed Price</div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(scrapedCar.Description))
                    {
                        <div class="overview-section">
                            <div class="section-header">
                                <span class="oi oi-document"></span>
                                <h3>Overview</h3>
                            </div>
                            <div class="overview-content">
                                @{
                                    var descriptionParts = scrapedCar.Description.Split("[!@@Additional Info@@!]");
                                    var mainDescription = descriptionParts[0].Trim();
                                }
                                <p class="main-description">@mainDescription</p>
                                @if (descriptionParts.Length > 1)
                                {
                                    <div class="additional-features">
                                        <h4>Additional Features (@(descriptionParts[1].Split(',').Length))</h4>
                                        <div class="feature-tags">
                                            @foreach (var feature in descriptionParts[1].Split(','))
                                            {
                                                <span class="feature-tag">@feature.Trim()</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            @if (scrapedCar.Stats != null && scrapedCar.Stats.Any())
            {
                <div class="stats-container">
                    <div class="stats-section">
                        <div class="section-header">
                            <span class="oi oi-graph"></span>
                            <h3>Detailed Specifications</h3>
                            <div class="stats-count">@scrapedCar.Stats.Count specifications</div>
                        </div>
                        
                        @{
                            var groupedStats = scrapedCar.Stats
                                .GroupBy(stat => 
                                {
                                    var header = stat["header"];
                                    if (header.Contains("ðŸ“‹")) return "Category";
                                    if (header.Contains("ðŸ”§")) return "Options";
                                    if (header.Contains("  â€¢ ")) return "Sub-option";
                                    return "Specification";
                                })
                                .ToDictionary(g => g.Key, g => g.ToList());
                        }
                        
                        <div class="specs-container">
                            @foreach (var group in groupedStats)
                            {
                                <div class="spec-group">
                                    <div class="spec-group-header">
                                        <h4>@group.Key</h4>
                                        <span class="spec-count">@group.Value.Count</span>
                                    </div>
                                    <div class="spec-grid">
                                        @foreach (var stat in group.Value)
                                        {
                                            <div class="spec-item">
                                                <span class="spec-label">@stat["header"].Replace("ðŸ“‹", "").Replace("ðŸ”§", "").Replace("  â€¢ ", "").Trim()</span>
                                                <span class="spec-value">@stat["value"]</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            
            <div class="actions">
                <button class="btn btn-primary" @onclick="SaveListing">
                    <span class="oi oi-plus"></span>
                    Save Listing
                </button>
                <button class="btn btn-secondary" @onclick="ScrapeAgain">
                    <span class="oi oi-reload"></span>
                    Scrape Different Car
                </button>
            </div>
        }
        else
        {
            <div class="scrape-form">
                <div class="form-group">
                    <label for="cargurus-url">CarGurus.com Listing URL</label>
                    <input 
                        type="url" 
                        id="cargurus-url" 
                        class="form-control" 
                        placeholder="https://www.cargurus.com/Cars/..." 
                        @bind="cargurusUrl"
                        @onkeyup="HandleUrlInput" />
                    <small class="form-text">Paste the exact URL from CarGurus.com</small>
                </div>
                
                <div class="example-urls">
                    <h4>Example URLs:</h4>
                    <ul>
                        <li>https://www.cargurus.com/Cars/new/...</li>
                        <li>https://www.cargurus.com/Cars/used/...</li>
                    </ul>
                </div>
                
                <button 
                    class="btn btn-primary btn-large" 
                    @onclick="ScrapeCarDetails" 
                    disabled="@(string.IsNullOrWhiteSpace(cargurusUrl) || !IsValidCargurusUrl())">
                    <span class="oi oi-magnifying-glass"></span>
                    Scrape Car Details
                </button>
            </div>
        }
    </div>
</div>

@code {
    private string cargurusUrl = "";
    private bool isLoading = false;
    private ScrapedCar? scrapedCar = null;
    private string errorMessage = "";
    private int currentImageIndex = 0;

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleUrlInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ScrapeCarDetails();
        }
    }

    private bool IsValidCargurusUrl()
    {
        return !string.IsNullOrWhiteSpace(cargurusUrl) && 
               cargurusUrl.Contains("cargurus.com") && 
               cargurusUrl.Contains("/Cars/");
    }

    private async Task ScrapeCarDetails()
    {
        if (string.IsNullOrWhiteSpace(cargurusUrl) || !IsValidCargurusUrl())
        {
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            // Simulate network delay for better UX
            await Task.Delay(2000);
            
            // Scrape car details using C# logic
            scrapedCar = await ScrapeCarGurusUrl(cargurusUrl);
            
            if (scrapedCar == null)
            {
                errorMessage = "Failed to scrape car details. Please check the URL and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error scraping car details: {ex.Message}";
            Console.WriteLine($"Error in ScrapeCarDetails: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<ScrapedCar?> ScrapeCarGurusUrl(string url)
    {
        try
        {
            // Call the Python API (update this URL with your Render service URL)
            using var httpClient = new HttpClient();
            var request = new { url = url };
            var response = await httpClient.PostAsJsonAsync("https://car-lister.onrender.com/api/scrape", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ScrapeApiResponse>();
                if (result?.Success == true && result.Data != null)
                {
                    return result.Data;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling Python API: {ex.Message}");
            // TODO: Nice error formatted on page
        }

        return null;
    }

    public class ScrapeApiResponse
    {
        public bool Success { get; set; }
        public ScrapedCar? Data { get; set; }
        public string? Error { get; set; }
    }

    private void ScrapeAgain()
    {
        scrapedCar = null;
        cargurusUrl = "";
        errorMessage = "";
        currentImageIndex = 0;
        StateHasChanged();
    }

    private void PreviousImage()
    {
        if (currentImageIndex > 0)
        {
            currentImageIndex--;
            StateHasChanged();
        }
    }

    private void NextImage()
    {
        if (scrapedCar?.Images != null && currentImageIndex < scrapedCar.Images.Count - 1)
        {
            currentImageIndex++;
            StateHasChanged();
        }
    }

    private void SelectImage(int index)
    {
        currentImageIndex = index;
        StateHasChanged();
    }

    private async Task SaveListing()
    {
        if (scrapedCar == null) return;

        try
        {
            // TODO: Implement saving to Firestore
            // await CarService.AddCar(scrapedCar);
            
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving listing: {ex.Message}";
            StateHasChanged();
        }
    }

    public class ScrapedCar
    {
        public string Make { get; set; } = "";
        public string Model { get; set; } = "";
        public int Year { get; set; }
        public decimal Price { get; set; }
        public string Description { get; set; } = "";
        public List<string> Features { get; set; } = new();
        public List<Dictionary<string, string>> Stats { get; set; } = new();
        public List<string> Images { get; set; } = new();
        public string OriginalUrl { get; set; } = "";
        public string FullTitle { get; set; } = "";
    }
} 