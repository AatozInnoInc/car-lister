@page "/add-listing"
@using Microsoft.AspNetCore.Authorization
@using car_lister.Services
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Add New Listing - Car Lister</PageTitle>
<link href="css/addlisting.css" rel="stylesheet" />
<script src="js/firestore.js"></script>

<div class="add-listing-container">
    <div class="header">
        <button class="btn-back" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span>
            Back
        </button>
        <h1>Add New Car Listing</h1>
        <p class="subtitle">Scrape car details from CarGurus.com</p>
    </div>

    <div class="content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Scraping car details...</p>
            </div>
        }
        else if (scrapedCar != null)
        {
            <div class="car-preview">
                @if (scrapedCar.Images != null && scrapedCar.Images.Any())
                {
                    <div class="image-gallery-container">
                        <div class="main-image-container">
                            <img src="@scrapedCar.Images[currentImageIndex]" alt="@scrapedCar.Make @scrapedCar.Model" class="main-image" @onclick="OpenFullScreen" />
                            <div class="fullscreen-indicator" @onclick="OpenFullScreen">
                                <span class="oi oi-fullscreen-enter"></span>
                            </div>
                            @if (scrapedCar.Images.Count > 1)
                            {
                                <div class="image-navigation">
                                    <button class="nav-btn prev" @onclick="PreviousImage" disabled="@(currentImageIndex == 0)">
                                        <span class="oi oi-chevron-left"></span>
                                    </button>
                                    <div class="image-counter">
                                        @(currentImageIndex + 1) of @scrapedCar.Images.Count
                                    </div>
                                    <button class="nav-btn next" @onclick="NextImage" disabled="@(currentImageIndex == scrapedCar.Images.Count - 1)">
                                        <span class="oi oi-chevron-right"></span>
                                    </button>
                                </div>
                            }
                        </div>
                        
                        @if (scrapedCar.Images.Count > 1)
                        {
                            <div class="thumbnail-scroll">
                                <div class="thumbnail-container">
                                    @for (int i = 0; i < scrapedCar.Images.Count; i++)
                                    {
                                        var index = i;
                                        <div class="thumbnail-wrapper @(index == currentImageIndex ? "active" : "")" @onclick="() => SelectImage(index)">
                                            <img src="@scrapedCar.Images[i]" alt="Car image @(i + 1)" class="thumbnail" />
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                
                <div class="car-details">
                    <div class="car-header">
                        <div class="car-title">
                            <h2>@scrapedCar.FullTitle</h2>
                            <div class="car-badge">@scrapedCar.Year</div>
                        </div>
                        <div class="price-container">
                            <div class="price">$@scrapedCar.Price.ToString("N0")</div>
                            <div class="price-label">Listed Price</div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(scrapedCar.Description))
                    {
                        <div class="overview-section">
                            <div class="section-header">
                                <span class="oi oi-document"></span>
                                <h3>Overview</h3>
                            </div>
                            <div class="overview-content">
                                @{
                                    var descriptionParts = scrapedCar.Description.Split("[!@@Additional Info@@!]");
                                    var mainDescription = descriptionParts[0].Trim();
                                }
                                <p class="main-description">@mainDescription</p>
                                @if (descriptionParts.Length > 1)
                                {
                                    <div class="additional-features">
                                        <h4>Additional Features (@(descriptionParts[1].Split(',').Length))</h4>
                                        <div class="feature-tags">
                                            @foreach (var feature in descriptionParts[1].Split(','))
                                            {
                                                <span class="feature-tag">@feature.Trim()</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            @if (scrapedCar.Stats != null && scrapedCar.Stats.Any())
            {
                <div class="stats-container">
                    <div class="stats-section">
                        <div class="section-header">
                            <span class="oi oi-graph"></span>
                            <h3>Detailed Specifications</h3>
                            <div class="stats-count">@scrapedCar.Stats.Count specifications</div>
                        </div>
                        
                        @{
                            var groupedStats = scrapedCar.Stats
                                .GroupBy(stat => 
                                {
                                    var header = stat["header"];
                                    if (header.Contains("ðŸ“‹")) return "Category";
                                    if (header.Contains("ðŸ”§")) return "Options";
                                    if (header.Contains("  â€¢ ")) return "Sub-option";
                                    return "Specification";
                                })
                                .ToDictionary(g => g.Key, g => g.ToList());
                        }
                        
                        <div class="specs-container">
                            @foreach (var group in groupedStats)
                            {
                                <div class="spec-group">
                                    <div class="spec-group-header">
                                        <h4>@group.Key</h4>
                                        <span class="spec-count">@group.Value.Count</span>
                                    </div>
                                    <div class="spec-grid">
                                        @foreach (var stat in group.Value)
                                        {
                                            <div class="spec-item">
                                                <span class="spec-label">@stat["header"].Replace("ðŸ“‹", "").Replace("ðŸ”§", "").Replace("  â€¢ ", "").Trim()</span>
                                                <span class="spec-value">@stat["value"]</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            
            <div class="actions">
                <button class="btn btn-primary" @onclick="SaveListing">
                    <span class="oi oi-plus"></span>
                    Save Listing
                </button>
                <button class="btn btn-download" @onclick="DownloadListing">
                    <span class="oi oi-data-transfer-download"></span>
                    Download Listing
                </button>
                <button class="btn btn-images" @onclick="DownloadImages" disabled="@(scrapedCar?.Images == null || !scrapedCar.Images.Any())">
                    <span class="oi oi-image"></span>
                    Download Images
                </button>
                <button class="btn btn-secondary" @onclick="ScrapeAgain">
                    <span class="oi oi-reload"></span>
                    Scrape Different Car
                </button>
            </div>
        }
        else
        {
            <div class="scrape-form">
                <div class="form-group">
                    <label for="cargurus-url">CarGurus.com Listing URL</label>
                    <input 
                        type="url" 
                        id="cargurus-url" 
                        class="form-control" 
                        placeholder="https://www.cargurus.com/Cars/..." 
                        @bind="cargurusUrl"
                        @onkeyup="HandleUrlInput" />
                    <small class="form-text">Paste the exact URL from CarGurus.com</small>
                </div>
                
                <div class="example-urls">
                    <h4>Example URLs:</h4>
                    <ul>
                        <li>https://www.cargurus.com/Cars/new/...</li>
                        <li>https://www.cargurus.com/Cars/used/...</li>
                    </ul>
                </div>
                
                <button 
                    class="btn btn-primary btn-large" 
                    @onclick="ScrapeCarDetails" 
                    disabled="@(string.IsNullOrWhiteSpace(cargurusUrl) || !IsValidCargurusUrl())">
                    <span class="oi oi-magnifying-glass"></span>
                    Scrape Car Details
                </button>
            </div>
        }
    </div>
</div>

@if (isFullScreenOpen && scrapedCar?.Images != null)
{
    <div class="fullscreen-overlay" @onclick="async () => await CloseFullScreen()">
        <div class="fullscreen-container" @onclick:stopPropagation="true">
            <div class="fullscreen-header">
                <button class="fullscreen-close" @onclick="async () => await CloseFullScreen()">
                    <span class="oi oi-x"></span>
                </button>
                <div class="fullscreen-counter">
                    @(fullScreenImageIndex + 1) of @scrapedCar.Images.Count
                </div>
            </div>
            
            <div class="fullscreen-image-container">
                <img src="@scrapedCar.Images[fullScreenImageIndex]" alt="@scrapedCar.Make @scrapedCar.Model" class="fullscreen-image" />
                
                @if (scrapedCar.Images.Count > 1)
                {
                    <button class="fullscreen-nav-btn prev" @onclick="async () => await PreviousFullScreenImage()" disabled="@(fullScreenImageIndex == 0)">
                        <span class="oi oi-chevron-left"></span>
                    </button>
                    <button class="fullscreen-nav-btn next" @onclick="async () => await NextFullScreenImage()" disabled="@(fullScreenImageIndex == scrapedCar.Images.Count - 1)">
                        <span class="oi oi-chevron-right"></span>
                    </button>
                }
            </div>
            
            @if (scrapedCar.Images.Count > 1)
            {
                <div class="fullscreen-thumbnails">
                    @for (int i = 0; i < scrapedCar.Images.Count; i++)
                    {
                        var index = i;
                        <div class="fullscreen-thumbnail @(index == fullScreenImageIndex ? "active" : "")" @onclick="async () => await SelectFullScreenImage(index)">
                            <img src="@scrapedCar.Images[i]" alt="Car image @(i + 1)" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private string cargurusUrl = "";
    private bool isLoading = false;
    private ScrapedCar? scrapedCar = null;
    private string errorMessage = "";
    private int currentImageIndex = 0;
    private bool isFullScreenOpen = false;
    private int fullScreenImageIndex = 0;

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleUrlInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ScrapeCarDetails();
        }
    }

    private bool IsValidCargurusUrl()
    {
        return !string.IsNullOrWhiteSpace(cargurusUrl) && 
               cargurusUrl.Contains("cargurus.com") && 
               cargurusUrl.Contains("/Cars/");
    }

    private async Task ScrapeCarDetails()
    {
        if (string.IsNullOrWhiteSpace(cargurusUrl) || !IsValidCargurusUrl())
        {
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            // Simulate network delay for better UX
            await Task.Delay(2000);
            
            // Scrape car details using C# logic
            scrapedCar = await ScrapeCarGurusUrl(cargurusUrl);
            
            if (scrapedCar == null)
            {
                errorMessage = "Failed to scrape car details. Please check the URL and try again.";
            }
            else
            {
                // Reset to first image and scroll to it
                currentImageIndex = 0;
                await Task.Delay(100); // Small delay to ensure DOM is updated
                await ScrollToActiveThumbnail();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error scraping car details: {ex.Message}";
            Console.WriteLine($"Error in ScrapeCarDetails: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<ScrapedCar?> ScrapeCarGurusUrl(string url)
    {
        try
        {
            // Call the Python API (update this URL with your Render service URL)
            using var httpClient = new HttpClient();
            var request = new { url = url };
            var response = await httpClient.PostAsJsonAsync("https://car-lister.onrender.com/api/scrape", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ScrapeApiResponse>();
                if (result?.Success == true && result.Data != null)
                {
                    return result.Data;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling Python API: {ex.Message}");
            // TODO: Nice error formatted on page
        }

        return null;
    }

    public class ScrapeApiResponse
    {
        public bool Success { get; set; }
        public ScrapedCar? Data { get; set; }
        public string? Error { get; set; }
    }

    private void ScrapeAgain()
    {
        scrapedCar = null;
        cargurusUrl = "";
        errorMessage = "";
        currentImageIndex = 0;
        StateHasChanged();
    }

    private async Task PreviousImage()
    {
        if (currentImageIndex > 0)
        {
            currentImageIndex--;
            StateHasChanged();
            await ScrollToActiveThumbnail();
        }
    }

    private async Task NextImage()
    {
        if (scrapedCar?.Images != null && currentImageIndex < scrapedCar.Images.Count - 1)
        {
            currentImageIndex++;
            StateHasChanged();
            await ScrollToActiveThumbnail();
        }
    }

    private async Task SelectImage(int index)
    {
        currentImageIndex = index;
        StateHasChanged();
        await ScrollToActiveThumbnail();
    }

    private async Task ScrollToActiveThumbnail()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToActiveThumbnail", currentImageIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to thumbnail: {ex.Message}");
        }
    }

    private async Task ScrollToActiveFullscreenThumbnail()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToActiveFullscreenThumbnail", fullScreenImageIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to fullscreen thumbnail: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize any JavaScript functionality
            await JSRuntime.InvokeVoidAsync("console.log", "AddListing page loaded");
            
            // Add fullscreen event listeners
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('closeFullscreen', () => {
                    window.dispatchEvent(new CustomEvent('blazorCloseFullscreen'));
                });
                window.addEventListener('previousFullscreenImage', () => {
                    window.dispatchEvent(new CustomEvent('blazorPreviousFullscreenImage'));
                });
                window.addEventListener('nextFullscreenImage', () => {
                    window.dispatchEvent(new CustomEvent('blazorNextFullscreenImage'));
                });
            ");
        }
    }

    private async Task OpenFullScreen()
    {
        fullScreenImageIndex = currentImageIndex;
        isFullScreenOpen = true;
        StateHasChanged();
        
        // Setup keyboard navigation
        await JSRuntime.InvokeVoidAsync("setupFullscreenKeyboard", 
            DotNetObjectReference.Create(this),
            "CloseFullScreen",
            "PreviousFullScreenImage", 
            "NextFullScreenImage"
        );
        
        // Scroll to active thumbnail after a small delay to ensure DOM is ready
        await Task.Delay(100);
        await ScrollToActiveFullscreenThumbnail();
    }

    [JSInvokable]
    public async Task CloseFullScreen()
    {
        isFullScreenOpen = false;
        StateHasChanged();
        
        // Cleanup keyboard navigation
        await JSRuntime.InvokeVoidAsync("cleanupFullscreenKeyboard");
    }

    [JSInvokable]
    public async Task PreviousFullScreenImage()
    {
        if (fullScreenImageIndex > 0)
        {
            fullScreenImageIndex--;
            StateHasChanged();
            await ScrollToActiveFullscreenThumbnail();
        }
    }

    [JSInvokable]
    public async Task NextFullScreenImage()
    {
        if (scrapedCar?.Images != null && fullScreenImageIndex < scrapedCar.Images.Count - 1)
        {
            fullScreenImageIndex++;
            StateHasChanged();
            await ScrollToActiveFullscreenThumbnail();
        }
    }

    private async Task SelectFullScreenImage(int index)
    {
        fullScreenImageIndex = index;
        StateHasChanged();
        await ScrollToActiveFullscreenThumbnail();
    }

    private async Task SaveListing()
    {
        if (scrapedCar == null) return;

        try
        {
            // TODO: Implement saving to Firestore
            // await CarService.AddCar(scrapedCar);
            
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving listing: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task DownloadListing()
    {
        if (scrapedCar == null) return;

        try
        {
            // Create a comprehensive HTML report
            var htmlContent = GenerateListingReport(scrapedCar);
            
            // Convert to PDF or create a downloadable HTML file
            var fileName = $"car-listing-{scrapedCar.Year}-{scrapedCar.Make}-{scrapedCar.Model}-{DateTime.Now:yyyyMMdd-HHmmss}.html";
            
            // Trigger download using JavaScript
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, htmlContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading listing: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task DownloadImages()
    {
        if (scrapedCar?.Images == null || !scrapedCar.Images.Any()) return;

        try
        {
            var fileName = $"car-images-{scrapedCar.Year}-{scrapedCar.Make}-{scrapedCar.Model}-{DateTime.Now:yyyyMMdd-HHmmss}.zip";
            
            // Pass the image URLs to JavaScript for direct download
            await JSRuntime.InvokeVoidAsync("downloadImages", scrapedCar.Images.ToArray(), fileName, scrapedCar.FullTitle);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading images: {ex.Message}";
            StateHasChanged();
        }
    }



    private string GenerateListingReport(ScrapedCar car)
    {
        var html = new System.Text.StringBuilder();
        
        html.AppendLine("<!DOCTYPE html>");
        html.AppendLine("<html lang='en'>");
        html.AppendLine("<head>");
        html.AppendLine("    <meta charset='UTF-8'>");
        html.AppendLine("    <meta name='viewport' content='width=device-width, initial-scale=1.0'>");
        html.AppendLine($"    <title>Car Listing - {car.FullTitle}</title>");
        html.AppendLine("    <style>");
        html.AppendLine("        body {");
        html.AppendLine("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;");
        html.AppendLine("            line-height: 1.6;");
        html.AppendLine("            color: #333;");
        html.AppendLine("            max-width: 1200px;");
        html.AppendLine("            margin: 0 auto;");
        html.AppendLine("            padding: 2rem;");
        html.AppendLine("            background: #f8f9fa;");
        html.AppendLine("        }");
        html.AppendLine("        .header {");
        html.AppendLine("            text-align: center;");
        html.AppendLine("            margin-bottom: 3rem;");
        html.AppendLine("            padding: 2rem;");
        html.AppendLine("            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);");
        html.AppendLine("            color: white;");
        html.AppendLine("            border-radius: 1rem;");
        html.AppendLine("        }");
        html.AppendLine("        .car-title {");
        html.AppendLine("            font-size: 2.5rem;");
        html.AppendLine("            margin-bottom: 1rem;");
        html.AppendLine("            background: linear-gradient(135deg, #00ff87, #60efff);");
        html.AppendLine("            -webkit-background-clip: text;");
        html.AppendLine("            -webkit-text-fill-color: transparent;");
        html.AppendLine("            background-clip: text;");
        html.AppendLine("        }");
        html.AppendLine("        .price {");
        html.AppendLine("            font-size: 2rem;");
        html.AppendLine("            color: #00ff87;");
        html.AppendLine("            font-weight: bold;");
        html.AppendLine("        }");
        html.AppendLine("        .image-gallery {");
        html.AppendLine("            display: grid;");
        html.AppendLine("            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));");
        html.AppendLine("            gap: 1rem;");
        html.AppendLine("            margin: 2rem 0;");
        html.AppendLine("        }");
        html.AppendLine("        .image-container {");
        html.AppendLine("            text-align: center;");
        html.AppendLine("        }");
        html.AppendLine("        .car-image {");
        html.AppendLine("            max-width: 100%;");
        html.AppendLine("            height: auto;");
        html.AppendLine("            border-radius: 0.5rem;");
        html.AppendLine("            box-shadow: 0 4px 12px rgba(0,0,0,0.1);");
        html.AppendLine("        }");
        html.AppendLine("        .section {");
        html.AppendLine("            background: white;");
        html.AppendLine("            padding: 2rem;");
        html.AppendLine("            margin: 2rem 0;");
        html.AppendLine("            border-radius: 1rem;");
        html.AppendLine("            box-shadow: 0 2px 8px rgba(0,0,0,0.1);");
        html.AppendLine("        }");
        html.AppendLine("        .section h2 {");
        html.AppendLine("            color: #1a1a2e;");
        html.AppendLine("            border-bottom: 2px solid #00ff87;");
        html.AppendLine("            padding-bottom: 0.5rem;");
        html.AppendLine("            margin-bottom: 1.5rem;");
        html.AppendLine("        }");
        html.AppendLine("        .specs-grid {");
        html.AppendLine("            display: grid;");
        html.AppendLine("            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));");
        html.AppendLine("            gap: 1rem;");
        html.AppendLine("        }");
        html.AppendLine("        .spec-item {");
        html.AppendLine("            background: #f8f9fa;");
        html.AppendLine("            padding: 1rem;");
        html.AppendLine("            border-radius: 0.5rem;");
        html.AppendLine("            border-left: 4px solid #00ff87;");
        html.AppendLine("        }");
        html.AppendLine("        .spec-label {");
        html.AppendLine("            font-weight: bold;");
        html.AppendLine("            color: #1a1a2e;");
        html.AppendLine("        }");
        html.AppendLine("        .spec-value {");
        html.AppendLine("            color: #666;");
        html.AppendLine("            margin-top: 0.25rem;");
        html.AppendLine("        }");
        html.AppendLine("        .features {");
        html.AppendLine("            display: flex;");
        html.AppendLine("            flex-wrap: wrap;");
        html.AppendLine("            gap: 0.5rem;");
        html.AppendLine("        }");
        html.AppendLine("        .feature-tag {");
        html.AppendLine("            background: rgba(0, 255, 135, 0.1);");
        html.AppendLine("            color: #00ff87;");
        html.AppendLine("            padding: 0.25rem 0.75rem;");
        html.AppendLine("            border-radius: 1rem;");
        html.AppendLine("            font-size: 0.9rem;");
        html.AppendLine("            border: 1px solid rgba(0, 255, 135, 0.3);");
        html.AppendLine("        }");
        html.AppendLine("        .footer {");
        html.AppendLine("            text-align: center;");
        html.AppendLine("            margin-top: 3rem;");
        html.AppendLine("            padding: 2rem;");
        html.AppendLine("            background: #1a1a2e;");
        html.AppendLine("            color: white;");
        html.AppendLine("            border-radius: 1rem;");
        html.AppendLine("        }");
        html.AppendLine("        @media print {");
        html.AppendLine("            body { background: white; }");
        html.AppendLine("            .header { background: #1a1a2e !important; }");
        html.AppendLine("        }");
        html.AppendLine("    </style>");
        html.AppendLine("</head>");
        html.AppendLine("<body>");
        html.AppendLine("    <div class='header'>");
        html.AppendLine($"        <h1 class='car-title'>{car.FullTitle}</h1>");
        html.AppendLine($"        <div class='price'>${car.Price.ToString("N0")}</div>");
        html.AppendLine($"        <p>Generated on {DateTime.Now:MMMM dd, yyyy 'at' HH:mm}</p>");
        html.AppendLine("    </div>");

        // Add images section
        if (car.Images != null && car.Images.Any())
        {
            html.AppendLine("    <div class='section'>");
            html.AppendLine("        <h2>Images</h2>");
            html.AppendLine("        <div class='image-gallery'>");
            foreach (var image in car.Images)
            {
                html.AppendLine("            <div class='image-container'>");
                html.AppendLine($"                <img src='{image}' alt='{car.FullTitle}' class='car-image' />");
                html.AppendLine("            </div>");
            }
            html.AppendLine("        </div>");
            html.AppendLine("    </div>");
        }

        // Add overview section
        if (!string.IsNullOrEmpty(car.Description))
        {
            html.AppendLine("    <div class='section'>");
            html.AppendLine("        <h2>Overview</h2>");
            var descriptionParts = car.Description.Split("[!@@Additional Info@@!]");
            html.AppendLine($"        <p>{descriptionParts[0].Trim()}</p>");
            
            if (descriptionParts.Length > 1)
            {
                html.AppendLine("        <h3>Additional Features</h3>");
                html.AppendLine("        <div class='features'>");
                foreach (var feature in descriptionParts[1].Split(','))
                {
                    html.AppendLine($"            <span class='feature-tag'>{feature.Trim()}</span>");
                }
                html.AppendLine("        </div>");
            }
            html.AppendLine("    </div>");
        }

        // Add specifications section
        if (car.Stats != null && car.Stats.Any())
        {
            html.AppendLine("    <div class='section'>");
            html.AppendLine("        <h2>Detailed Specifications</h2>");
            html.AppendLine("        <div class='specs-grid'>");
            foreach (var stat in car.Stats)
            {
                html.AppendLine("            <div class='spec-item'>");
                html.AppendLine($"                <div class='spec-label'>{stat["header"].Replace("ðŸ“‹", "").Replace("ðŸ”§", "").Replace("  â€¢ ", "").Trim()}</div>");
                html.AppendLine($"                <div class='spec-value'>{stat["value"]}</div>");
                html.AppendLine("            </div>");
            }
            html.AppendLine("        </div>");
            html.AppendLine("    </div>");
        }

        html.AppendLine("    <div class='footer'>");
        html.AppendLine($"        <p>Car Listing Report - {car.FullTitle}</p>");
        html.AppendLine($"        <p>Original URL: {car.OriginalUrl}</p>");
        html.AppendLine("        <p>Generated by Car Lister</p>");
        html.AppendLine("    </div>");
        html.AppendLine("</body>");
        html.AppendLine("</html>");

        return html.ToString();
    }

    public class ScrapedCar
    {
        public string Make { get; set; } = "";
        public string Model { get; set; } = "";
        public int Year { get; set; }
        public decimal Price { get; set; }
        public string Description { get; set; } = "";
        public List<string> Features { get; set; } = new();
        public List<Dictionary<string, string>> Stats { get; set; } = new();
        public List<string> Images { get; set; } = new();
        public string OriginalUrl { get; set; } = "";
        public string FullTitle { get; set; } = "";
    }
} 