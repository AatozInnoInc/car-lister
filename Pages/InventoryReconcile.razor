@page "/reconcile"
@using Microsoft.AspNetCore.Authorization
@using car_lister.Services
@using car_lister.Models
@inject NavigationManager NavigationManager
@inject ClientService ClientService
@inject InventoryService InventoryService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Inventory Reconciliation - Car Lister</PageTitle>
<link href="css/modal.css" rel="stylesheet" />
<link href="css/workflow.css" rel="stylesheet" />
<link href="css/addlisting.css" rel="stylesheet" />
<script src="js/firestore.js"></script>

<div class="onboarding-container">
    <div class="header">
        <button class="btn-back" @onclick="GoBack">
            <span class="oi oi-arrow-left"></span>
            Back
        </button>
        <h1>Inventory Reconciliation</h1>
        <p class="subtitle">Refresh, review differences, and apply updates</p>
    </div>

    <!-- Progress Bar (shown globally except on Save, where it's shown in-step) -->
    @if (currentStep != 3)
    {
        <ProgressBar CurrentStep="currentStep" Steps="progressSteps" />
    }

    <div class="content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <p>@loadingMessage</p>
            </div>
        }
        else if (currentStep == 1)
        {
            <!-- Step 1: Client Selection with UpdatedAt indicator -->
            <div class="step-content client-setup">
                <div class="step-header">
                    <h2>Select Client</h2>
                    <p>Choose a client to refresh and reconcile inventory</p>
                </div>

                <div class="form-container">
                    <div class="form-group">
                        <label for="client-select">Client</label>
                        <div class="form-control p-0">
                            <div class="dropdown w-100">
                                <select id="client-select" class="form-control" @bind="selectedClientId"
                                    @bind:after="OnClientSelectionChanged">
                                    <option value="">Select client</option>
                                    @foreach (var client in clients)
                                    {
                                        var label = $"{client.Name}";
                                        <option value="@client.Id">@label</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <small class="form-text">Indicator: color-coded status will show after selection.</small>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedClientId))
                    {
                        var client = clients.FirstOrDefault(c => c.Id == selectedClientId);
                        if (client != null)
                        {
                            <SummaryCard Title="@client.Name" IconClass="oi oi-briefcase" class="mt-1"
                                Details="@GetClientSummaryDetails(client)" />
                        }
                    }
                </div>

                @if (isImporting)
                {
                    <div class="import-progress">
                        <div class="progress-indicator">
                            <div class="spinner"></div>
                            <p>@importStatus</p>
                        </div>
                    </div>
                }
                <StepNavigation ShowBackButton="false" OnNext="RefreshAndProceed" NextButtonText="Refresh Inventory"
                    IsNextDisabled="@(isImporting || string.IsNullOrEmpty(selectedClientId))" />
            </div>
        }
        else if (currentStep == 2)
        {
            <!-- Step 3: Review (diff summary + iterative review) -->
            <div class="step-content additional-info">
                <div class="step-header">
                    <h2>Review Differences</h2>
                    <p>Summary of detected changes since last update</p>
                </div>

                <div class="additional-info-summary">
                    <div class="summary-card">
                        <div class="summary-header">
                            <span class="oi oi-info"></span>
                            <h3>Change Summary</h3>
                        </div>
                        <div class="summary-details">
                            <div class="detail-item"><span class="label">New Vehicles:</span><span
                                    class="value">@newVehicles.Count</span></div>
                            <div class="detail-item"><span class="label">Sold Vehicles:</span><span
                                    class="value">@soldVehicles.Count</span></div>
                            <div class="detail-item"><span class="label">Price Changes:</span><span
                                    class="value">@priceChanges.Count</span></div>
                            <div class="detail-item"><span class="label">Photo Changes:</span><span
                                    class="value">@photoChanges.Count</span></div>
                            <div class="detail-item"><span class="label">Metadata Changes:</span><span
                                    class="value">@metadataChanges.Count</span></div>
                            <div class="detail-item"><span class="label">Photo Selection Needed:</span><span
                                    class="value">@allChanges.Count(c => c.ChangeType == "Photo Selection Needed")</span>
                            </div>
                        </div>
                    </div>
                </div>

                @if (reviewMode == "summary")
                {
                    <div class="step-actions additional-info-actions">
                        <button class="btn btn-primary btn-large" @onclick="() => StartIterativeReview()">
                            <span class="oi oi-media-step-forward"></span>
                            Review Each Change
                        </button>
                    </div>
                }
                else
                {
                    @if (allChanges.Count > 0)
                    {
                        var change = allChanges[currentChangeIndex];
                        <div class="summary-card mt-1 @GetChangeCardClass(change.ChangeType)">
                            <div class="summary-header @GetChangeHeaderClass(change.ChangeType)">
                                <span class="@GetChangeIconClass(change.ChangeType)"></span>
                                <h3>@change.ChangeType — @change.Title</h3>
                                @if (change.ChangeType == "Sold Vehicle")
                                {
                                    <span class="action-badge action-badge-remove">REMOVE</span>
                                }
                                else if (change.ChangeType == "New Vehicle")
                                {
                                    <span class="action-badge action-badge-add">ADD</span>
                                }
                                else if (change.ChangeType == "Price Change")
                                {
                                    <span class="action-badge action-badge-update">UPDATE</span>
                                }
                                else if (change.ChangeType == "Photo Change")
                                {
                                    <span class="action-badge action-badge-update">UPDATE</span>
                                }
                                else if (change.ChangeType == "Photo Selection Needed")
                                {
                                    <span class="action-badge action-badge-select">SELECT</span>
                                }
                                else if (change.ChangeType == "Metadata Change")
                                {
                                    <span class="action-badge action-badge-select">SPECIFY</span>
                                }
                            </div>
                            <div class="summary-details">
                                @if (change.ChangeType == "Sold Vehicle")
                                {
                                    var soldCar = soldVehicles.FirstOrDefault(c => GetCarUrlKey(c) == change.Url);
                                    if (soldCar != null)
                                    {
                                        <div class="detail-item"><span class="label">Stock Number:</span><span
                                                class="value">@soldCar.StockNumber</span></div>
                                        <div class="detail-item"><span class="label">Price:</span><span
                                                class="value">$@soldCar.Price.ToString("N0")</span></div>
                                        <div class="detail-item"><span class="label">Mileage:</span><span
                                                class="value">@soldCar.Mileage.ToString("N0") miles</span></div>
                                        <div class="detail-item"><span class="label">Year:</span><span class="value">@soldCar.Year</span>
                                        </div>
                                        <div class="detail-item"><span class="label">Make/Model:</span><span class="value">@soldCar.Make
                                                @soldCar.Model</span></div>
                                        <div class="detail-item"><span class="label">Action:</span><span
                                                class="value text-danger font-weight-bold">🚫 Remove from inventory</span></div>
                                        <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                    target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                    }
                                }
                                else if (change.ChangeType == "New Vehicle")
                                {
                                    var newCar = newVehicles.FirstOrDefault(c => GetCarUrlKey(c) == change.Url);
                                    if (newCar != null)
                                    {
                                        <div class="detail-item"><span class="label">Stock Number:</span><span
                                                class="value">@newCar.StockNumber</span></div>
                                        <div class="detail-item"><span class="label">Price:</span><span
                                                class="value">$@newCar.Price.ToString("N0")</span></div>
                                        <div class="detail-item"><span class="label">Mileage:</span><span
                                                class="value">@newCar.Mileage.ToString("N0") miles</span></div>
                                        <div class="detail-item"><span class="label">Year:</span><span class="value">@newCar.Year</span>
                                        </div>
                                        <div class="detail-item"><span class="label">Make/Model:</span><span class="value">@newCar.Make
                                                @newCar.Model</span></div>
                                        <div class="detail-item"><span class="label">Action:</span><span
                                                class="value text-success font-weight-bold">✅ Add to inventory</span></div>
                                        <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                    target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                    }
                                }
                                else if (change.ChangeType == "Price Change")
                                {
                                    <div class="detail-item"><span class="label">Old Price:</span><span
                                            class="value">$@change.OldPrice?.ToString("N0")</span></div>
                                    <div class="detail-item"><span class="label">New Price:</span><span
                                            class="value">$@change.NewPrice?.ToString("N0")</span></div>
                                    <div class="detail-item"><span class="label">Price Difference:</span><span
                                            class="value @(change.NewPrice > change.OldPrice ? "text-danger" : "text-success")">$@((change.NewPrice
                                                                        - change.OldPrice)?.ToString("N0"))</span></div>
                                    <div class="detail-item"><span class="label">Action:</span><span
                                            class="value text-warning font-weight-bold">🔄 Update price</span></div>
                                    <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                }
                                else if (change.ChangeType == "Photo Change")
                                {
                                    <div class="detail-item"><span class="label">Old Photos:</span><span
                                            class="value">@((change.OldPhotos?.Count ?? 0))</span></div>
                                    <div class="detail-item"><span class="label">New Photos:</span><span
                                            class="value">@((change.NewPhotos?.Count ?? 0))</span></div>
                                    <div class="detail-item"><span class="label">Photo Difference:</span><span
                                            class="value @((change.NewPhotos?.Count ?? 0) > (change.OldPhotos?.Count ?? 0) ? "text-success" : "text-danger")">@(((change.NewPhotos?.Count
                                                                        ?? 0) - (change.OldPhotos?.Count ?? 0)).ToString("+0;-0;0"))</span></div>
                                    <div class="detail-item"><span class="label">Action:</span><span
                                            class="value text-warning font-weight-bold">🔄 Update photos</span></div>
                                    <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                }
                                else if (change.ChangeType == "Photo Selection Needed")
                                {
                                    <div class="detail-item"><span class="label">Available Photos:</span><span
                                            class="value">@((change.OldPhotos?.Count ?? 0))</span></div>
                                    <div class="detail-item"><span class="label">Status:</span><span
                                            class="value text-danger font-weight-bold">No photos selected</span></div>
                                    <div class="detail-item"><span class="label">Action:</span><span
                                            class="value text-info font-weight-bold">📸 Select photos</span></div>
                                    <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                }
                                else if (change.ChangeType == "Metadata Change")
                                {
                                    <div class="detail-item"><span class="label">Exterior Color:</span><span
                                            class="value">@(string.IsNullOrWhiteSpace(change.OldExteriorColor) ? "❌ Not specified" : change.OldExteriorColor)</span></div>
                                    <div class="detail-item"><span class="label">Interior Color:</span><span
                                            class="value">@(string.IsNullOrWhiteSpace(change.OldInteriorColor) ? "❌ Not specified" : change.OldInteriorColor)</span></div>
                                    <div class="detail-item"><span class="label">Body Style:</span><span
                                            class="value">@(string.IsNullOrWhiteSpace(change.OldBodyStyle) ? "❌ Not specified" : change.OldBodyStyle)</span></div>
                                    <div class="detail-item"><span class="label">Action:</span><span
                                            class="value text-info font-weight-bold">📝 Specify metadata</span></div>
                                    <div class="detail-item"><span class="label">URL:</span><span class="value"><a href="@change.Url"
                                                target="_blank" rel="noopener noreferrer">View listing</a></span></div>
                                }
                            </div>
                        </div>

                        @* Inline Photo Picker for photo selection on relevant changes (but NOT for sold vehicles) *@
                        @if (change.ChangeType != "Sold Vehicle")
                        {
                            // Prefer the scraped car (has latest colors + merged Firestore ID)
                            var carForPicker = scrapedNow.FirstOrDefault(c => GetCarUrlKey(c) == change.Url)
                            ?? existingCars.FirstOrDefault(c => GetCarUrlKey(c) == change.Url);
                            if (carForPicker != null)
                            {
                                <div class="car-photo-section" id="current-car-section">
                                    <div class="car-header">
                                        <div class="car-info">
                                            <h3>
                                                <a href="@carForPicker.OriginalUrl" target="_blank" rel="noopener noreferrer"
                                                    class="car-title-link">
                                                    @carForPicker.FullTitle
                                                    <span class="oi oi-external-link"
                                                        style="font-size: 0.8em; margin-left: 0.5rem; opacity: 0.7;"></span>
                                                </a>
                                            </h3>
                                            <div class="car-meta">
                                                <span class="stock-number">Stock: @carForPicker.StockNumber</span>
                                                <span class="price">$@carForPicker.Price.ToString("N0")</span>
                                                <span class="photo-count">@carForPicker.Images.Count photos</span>
                                            </div>
                                        </div>
                                    </div>

                                    <VehicleMetaEditor Meta="@GetVehicleMeta(carForPicker)" Car="@carForPicker" ShowOriginalBadges="true" OnMetaChanged="OnMetadataChanged" />

                                    @if (!IsCurrentCarMetadataComplete() && allChanges.Count > 0 &&
                                          currentChangeIndex < allChanges.Count &&
                                          allChanges[currentChangeIndex].ChangeType == "Metadata Change")
                                    {
                                        <div class="alert alert-warning mt-2" style="margin-bottom: 1rem;">
                                            <span class="oi oi-warning"></span>
                                            <strong>Required:</strong> Please select all three Facebook Marketplace fields (Exterior Color, Interior Color, and Body Style) to proceed.
                                        </div>
                                    }

                                    <PhotoPicker Car="@carForPicker" Title="@($"Select Photos — {carForPicker.FullTitle}")"
                                        SelectedPhotos="@selectedPhotos" SelectedPhotosChanged="@OnSelectedPhotosChanged"
                                        ShowNavigation="false" />
                                </div>
                            }
                        }

                        <div class="car-navigation mt-1">
                            <button class="btn btn-sm btn-secondary" @onclick="PreviousChange"
                                disabled="@(currentChangeIndex <= 0)">
                                <span class="oi oi-chevron-left"></span>
                                Previous
                            </button>
                            <span class="car-counter">@(currentChangeIndex + 1) of @allChanges.Count</span>
                            <button class="btn btn-sm btn-secondary" @onclick="NextChange"
                                disabled="@(currentChangeIndex >= allChanges.Count - 1 || !_isNextButtonEnabled)">
                                Next
                                <span class="oi oi-chevron-right"></span>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="no-cars-message">
                            <div class="empty-state">
                                <span class="oi oi-check text-success fs-1"></span>
                                <h3>No changes detected</h3>
                                <p>Everything is up to date.</p>
                            </div>
                        </div>
                    }
                }

                @* Inline picker used above; dedicated photo selection mode removed *@

                @* Validation message for incomplete metadata - only show in iterative review mode *@
                @if (reviewMode == "iterative" && metadataChanges.Count > 0 && !IsAllRequiredMetadataFilled())
                {
                    var incompleteCars = GetCarsWithIncompleteMetadata();
                    <div class="alert alert-warning mt-1">
                        <strong>⚠️ Required Information Missing</strong>
                        <p>Please specify Exterior Color, Interior Color, and Body Style for all vehicles before continuing.</p>
                        @if (incompleteCars.Count <= 5)
                        {
                            <ul style="margin-bottom: 0;">
                                @foreach (var carTitle in incompleteCars)
                                {
                                    <li>@carTitle</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p><strong>@incompleteCars.Count vehicles</strong> need complete metadata.</p>
                        }
                    </div>
                }

                <div class="step-actions">
                    <button class="btn btn-primary btn-large" @onclick="NextStep" 
                            disabled="@(allChanges.Count == 0 || !_isContinueToSaveEnabled)">
                        <span class="oi oi-arrow-right"></span>
                        Continue to Save
                    </button>
                </div>
            </div>
        }
        else if (currentStep == 3)
        {
            <!-- Step 3: Save changes -->
            <div class="step-content completion">
                <div class="mb-1">
                    <ProgressBar CurrentStep="currentStep" Steps="progressSteps" />
                </div>
                @if (!string.IsNullOrEmpty(saveMessage))
                {
                    <div class="alert @(saveMessageType == "success" ? "alert-success" : "alert-error")">
                        @saveMessage
                    </div>
                }

                <div class="step-header">
                    <h2>Apply Changes</h2>
                    <p>Confirm and save updates to the database</p>
                </div>


                <div class="completion-summary">
                    <div class="success-icon">
                        <span class="oi oi-data-transfer-upload"></span>
                    </div>
                    <div class="summary-details">
                        <h3>Summary</h3>
                        <div class="detail-grid">
                            <div class="detail-item"><span class="label">New Vehicles:</span><span
                                    class="value">@summaryNewVehicles</span></div>
                            <div class="detail-item"><span class="label">Sold Vehicles:</span><span
                                    class="value">@summarySoldVehicles</span></div>
                            <div class="detail-item"><span class="label">Price Updates:</span><span
                                    class="value">@summaryPriceUpdates</span></div>
                            <div class="detail-item"><span class="label">Photo Updates:</span><span
                                    class="value">@summaryPhotoUpdates</span></div>
                            <div class="detail-item"><span class="label">Metadata Updates:</span><span
                                    class="value">@summaryMetadataUpdates</span></div>
                            <div class="detail-item"><span class="label">Photo Selection Updates:</span><span
                                    class="value">@summarySelectionUpdates</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="step-actions">
                    <button class="btn btn-primary btn-large" @onclick="ApplyChanges" disabled="@(isSaving || isSaved)">
                        <span class="oi oi-check"></span>
                        @((isSaving ? "Saving..." : (isSaved ? "Saved" : "Save Changes")))
                    </button>
                    <button class="btn btn-secondary btn-large" @onclick="StartOver" disabled="@isSaving">
                        <span class="oi oi-loop"></span>
                        Start Over
                    </button>
                    <button class="btn btn-secondary btn-large" @onclick="NavigateToTlpExport" disabled="@(!isSaved)">
                        <span class="oi oi-cloud-download"></span>
                        TLP Export
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private int currentStep = 1;
    private bool isLoading = false;
    private string loadingMessage = "";
    private bool isImporting = false;
    private string importStatus = "";
    private bool isSaving = false;
    private bool isSaved = false;
    private string saveMessage = "";
    private string saveMessageType = ""; // "success" | "error"
    private bool hasRefreshed = false;
    private bool _isNextButtonEnabled = false;
    private bool _isContinueToSaveEnabled = false;
    private int summaryNewVehicles = 0;
    private int summarySoldVehicles = 0;
    private int summaryPriceUpdates = 0;
    private int summaryPhotoUpdates = 0;
    private int summaryMetadataUpdates = 0;
    private int summarySelectionUpdates = 0;

    private List<Client> clients = new List<Client>();
    private string selectedClientId = "";
    private Client? selectedClient = null;

    private List<ScrapedCar> scrapedNow = new List<ScrapedCar>();
    private List<ScrapedCar> existingCars = new List<ScrapedCar>();

    // Diffs
    private List<ScrapedCar> newVehicles = new List<ScrapedCar>();
    private List<ScrapedCar> soldVehicles = new List<ScrapedCar>();
    private List<(ScrapedCar OldCar, ScrapedCar NewCar)> priceChanges = new List<(ScrapedCar, ScrapedCar)>();
    private List<(ScrapedCar OldCar, ScrapedCar NewCar)> photoChanges = new List<(ScrapedCar, ScrapedCar)>();
    private List<(ScrapedCar OldCar, ScrapedCar NewCar)> metadataChanges = new List<(ScrapedCar, ScrapedCar)>();

    private List<ChangeItem> allChanges = new List<ChangeItem>();
    private int currentChangeIndex = 0;
    private string reviewMode = "summary";

    // Photo selection state
    private Dictionary<string, List<string>> selectedPhotos = new Dictionary<string, List<string>>();

    private Dictionary<string, VehicleMeta> vehicleMetaByCarId = new Dictionary<string, VehicleMeta>();

    private void InitializeSelectedPhotosFromExisting()
    {
        selectedPhotos.Clear();
        foreach (var car in existingCars)
        {
            var carId = car.Id;
            if (string.IsNullOrWhiteSpace(carId))
                continue;
            if (car.SelectedPhotoUrls != null && car.SelectedPhotoUrls.Count > 0)
                selectedPhotos[carId] = new List<string>(car.SelectedPhotoUrls);
        }
        StateHasChanged();
    }

    private void InitializeVehicleMetaFromExisting()
    {
        vehicleMetaByCarId.Clear();
        foreach (var car in existingCars)
        {
            if (string.IsNullOrWhiteSpace(car.Id)) continue;
            vehicleMetaByCarId[car.Id] = MetaMapper.MapFromCar(car);
        }
    }

    private List<ProgressBar.StepInfo> progressSteps = new List<ProgressBar.StepInfo>
    {
        new ProgressBar.StepInfo { Number = 1, Label = "Select Client" },
        new ProgressBar.StepInfo { Number = 2, Label = "Review" },
        new ProgressBar.StepInfo { Number = 3, Label = "Save" }
    };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        loadingMessage = "Loading clients...";
        try
        {
            clients = await ClientService.GetAllClientsAsync();
            clients = clients
                .OrderByDescending(c => c.UpdatedAt)
                .ToList();

            // Try to preselect from querystring: /reconcile?clientId=...
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var clientIdFromQuery = GetQueryParameterValue(uri.Query, "clientId");
            if (!string.IsNullOrWhiteSpace(clientIdFromQuery))
            {
                var match = clients.FirstOrDefault(c => string.Equals(c.Id, clientIdFromQuery, StringComparison.OrdinalIgnoreCase));
                if (match != null)
                {
                    selectedClientId = match.Id;
                    selectedClient = match;
                }
            }

            // Fallback: preselect first client if none selected
            if (string.IsNullOrWhiteSpace(selectedClientId) && clients.Count > 0)
            {
                selectedClientId = clients.First().Id;
                selectedClient = clients.First();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading clients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private void GoBack()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnClientSelectionChanged()
    {
        selectedClient = clients.FirstOrDefault(c => c.Id == selectedClientId);
        hasRefreshed = false;
        StateHasChanged();
    }

    private void NextStep()
    {
        if (currentStep == 1)
        {
            selectedClient = clients.FirstOrDefault(c => c.Id == selectedClientId);
        }
        if (currentStep < 3)
        {
            if (currentStep == 2)
            {
                CaptureSummarySnapshot();
            }
            currentStep++;
            StateHasChanged();
        }
    }

    private async Task RunRefresh()
    {
        if (selectedClient == null)
        {
            importStatus = "No client selected";
            isImporting = false;
            StateHasChanged();
            return;
        }

        isImporting = true;
        importStatus = "Scraping inventory...";
        StateHasChanged();

        try
        {
            var searchResult = await InventoryService.SearchDealerInventoryAsync(
            dealerEntityId: selectedClient.CarGurusEntityId ?? "",
            dealerName: selectedClient.Name,
            dealerUrl: selectedClient.DealerUrl,
            pageNumber: 1,
            inventoryType: GetInventoryTypeForDataSource(selectedClient.DataSource, selectedClient.VehicleFilter)
            );

            if (!searchResult.Success || searchResult.Cars == null || !searchResult.Cars.Any())
            {
                importStatus = searchResult.Success ? "No vehicles found for this dealer" : $"Error: {searchResult.ErrorMessage}";
                isImporting = false;
                StateHasChanged();
                return;
            }

            // Hydrate image lists per car if needed using VDP scrape
            try
            {
                foreach (var car in searchResult.Cars)
                {
                    if (car.Images == null || car.Images.Count <= 1)
                    {
                        var url = string.IsNullOrWhiteSpace(car.OriginalUrl) ? car.ListingUrl : car.OriginalUrl;
                        if (!string.IsNullOrWhiteSpace(url))
                        {
                            var hydrated = await InventoryService.ScrapeCarByUrlAsync(url);
                            if (hydrated != null && hydrated.Images != null && hydrated.Images.Count > (car.Images?.Count ?? 0))
                            {
                                car.Images = hydrated.Images;
                                car.FullTitle = string.IsNullOrWhiteSpace(car.FullTitle) ? hydrated.FullTitle : car.FullTitle;
                                // Also copy color and body style data
                                if (!string.IsNullOrWhiteSpace(hydrated.ExteriorColor))
                                    car.ExteriorColor = hydrated.ExteriorColor;
                                if (!string.IsNullOrWhiteSpace(hydrated.InteriorColor))
                                    car.InteriorColor = hydrated.InteriorColor;
                                if (!string.IsNullOrWhiteSpace(hydrated.BodyStyle))
                                    car.BodyStyle = hydrated.BodyStyle;
                            }
                        }
                    }
                }
            }
            catch { }

            var allScrapedCars = ConvertScrapedCarsToInternalFormat(searchResult.Cars, selectedClient);

            // Filter out cars with less than 3 photos
            scrapedNow = allScrapedCars.Where(c => c.Images != null && c.Images.Count >= 3).ToList();
            var excludedCount = allScrapedCars.Count - scrapedNow.Count;
            existingCars = await InventoryService.GetClientInventoryAsync(selectedClient.Id);

            // Merge Firestore IDs FROM existing cars INTO scraped cars (so scraped cars have both ID and colors)
            var existingByUrl = existingCars.ToDictionary(c => GetCarUrlKey(c), c => c, StringComparer.OrdinalIgnoreCase);
            foreach (var scrapedCar in scrapedNow)
            {
                var urlKey = GetCarUrlKey(scrapedCar);
                if (!string.IsNullOrEmpty(urlKey) && existingByUrl.TryGetValue(urlKey, out var existingCar))
                {
                    // Found matching existing car - copy the Firestore ID
                    scrapedCar.Id = existingCar.Id;
                }
            }

            // Also filter existing cars to only include those with 3+ photos
            existingCars = existingCars.Where(c => c.Images != null && c.Images.Count >= 3).ToList();

            InitializeSelectedPhotosFromExisting();
            InitializeVehicleMetaFromExisting();

            ComputeDiffs();

            // Finish refresh, remain on step 1 until user proceeds
            isImporting = false;
            hasRefreshed = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            importStatus = $"Error: {ex.Message}";
            isImporting = false;
            hasRefreshed = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAndProceed()
    {
        if (string.IsNullOrEmpty(selectedClientId))
            return;

        await RunRefresh();

        if (hasRefreshed)
        {
            currentStep = 2;
            StateHasChanged();
        }
    }

    private void ComputeDiffs()
    {
        newVehicles.Clear();
        soldVehicles.Clear();
        priceChanges.Clear();
        photoChanges.Clear();
        metadataChanges.Clear();
        allChanges.Clear();
        currentChangeIndex = 0;
        reviewMode = "summary";

        var existingByUrl = existingCars.ToDictionary(c => GetCarUrlKey(c), c => c, StringComparer.OrdinalIgnoreCase);
        var nowByUrl = scrapedNow.ToDictionary(c => GetCarUrlKey(c), c => c, StringComparer.OrdinalIgnoreCase);

        // New vehicles (in scrape now, not in DB)
        foreach (var car in scrapedNow)
        {
            var key = GetCarUrlKey(car);
            if (string.IsNullOrEmpty(key))
                continue;
            if (!existingByUrl.ContainsKey(key))
            {
                newVehicles.Add(car);
                allChanges.Add(ChangeItem.NewVehicle(car));
            }
        }

        // Sold vehicles (in DB, not in scrape now)
        foreach (var car in existingCars)
        {
            var key = GetCarUrlKey(car);
            if (string.IsNullOrEmpty(key))
                continue;
            if (!nowByUrl.ContainsKey(key))
            {
                soldVehicles.Add(car);
                allChanges.Add(ChangeItem.SoldVehicle(car));
            }
        }

        // Price / Photo changes
        foreach (var kvp in existingByUrl)
        {
            if (!nowByUrl.TryGetValue(kvp.Key, out var now))
            {
                continue;
            }
            var old = kvp.Value;
            if (Math.Abs((now.Price) - (old.Price)) > 0.01)
            {
                priceChanges.Add((old, now));
                allChanges.Add(ChangeItem.PriceChange(old, now));
            }

            if (!PhotosEqual(old.Images, now.Images))
            {
                photoChanges.Add((old, now));
                allChanges.Add(ChangeItem.PhotoChange(old, now));
            }

            // Check for metadata changes - either missing metadata or user has changed it
            if (HasMetadataChanges(old, now))
            {
                metadataChanges.Add((old, now));
                allChanges.Add(ChangeItem.MetadataChange(old, now));
            }
        }

        // Cars that exist in DB but have no selected photos (need photo selection)
        foreach (var car in existingCars)
        {
            var key = GetCarUrlKey(car);
            if (string.IsNullOrEmpty(key))
                continue;

            // Check if this car has no selected photos
            if (car.SelectedPhotoUrls == null || car.SelectedPhotoUrls.Count == 0)
            {
                // Only add if it's not already in our changes list
                if (!allChanges.Any(c => c.Url == key && c.ChangeType == "Photo Selection Needed"))
                {
                    photoChanges.Add((car, car)); // Use same car for both old and new
                    allChanges.Add(ChangeItem.PhotoSelectionNeeded(car));
                }
            }
        }
        
        // Initialize button enabled states after computing changes
        _isContinueToSaveEnabled = IsAllRequiredMetadataFilled();
    }

    private static bool PhotosEqual(List<string> a, List<string> b)
    {
        if (a == null && b == null) return true;
        if (a == null || b == null) return false;
        if (a.Count != b.Count) return false;
        for (int i = 0; i < a.Count; i++)
        {
            if (!string.Equals(a[i], b[i], StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }
        }
        return true;
    }

    private static bool SelectedPhotosEqual(List<string> a, List<string> b)
    {
        // Treat null and empty as equal, and compare as sets (order-insensitive)
        var setA = new HashSet<string>(a ?? new List<string>(), StringComparer.OrdinalIgnoreCase);
        var setB = new HashSet<string>(b ?? new List<string>(), StringComparer.OrdinalIgnoreCase);
        return setA.SetEquals(setB);
    }

    private static bool VehicleMetadataEqual(ScrapedCar a, ScrapedCar b)
    {
        return string.Equals(a.ExteriorColor ?? "", b.ExteriorColor ?? "", StringComparison.OrdinalIgnoreCase) &&
               string.Equals(a.InteriorColor ?? "", b.InteriorColor ?? "", StringComparison.OrdinalIgnoreCase) &&
               string.Equals(a.BodyStyle ?? "", b.BodyStyle ?? "", StringComparison.OrdinalIgnoreCase);
    }

    private static bool HasMetadataChanges(ScrapedCar oldCar, ScrapedCar newCar)
    {
        // Only detect cars that are MISSING metadata (empty or null) - these need user input
        bool hasMissingMetadata = string.IsNullOrWhiteSpace(oldCar.ExteriorColor) || 
                                 string.IsNullOrWhiteSpace(oldCar.InteriorColor) || 
                                 string.IsNullOrWhiteSpace(oldCar.BodyStyle);

        return hasMissingMetadata;
    }

    private static string? GetQueryParameterValue(string queryString, string key)
    {
        if (string.IsNullOrWhiteSpace(queryString) || string.IsNullOrWhiteSpace(key)) return null;
        if (queryString.StartsWith("?")) queryString = queryString.Substring(1);
        var parts = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);
        foreach (var part in parts)
        {
            var kv = part.Split('=', 2);
            var k = Uri.UnescapeDataString(kv[0]);
            if (string.Equals(k, key, StringComparison.OrdinalIgnoreCase))
            {
                var v = kv.Length > 1 ? Uri.UnescapeDataString(kv[1]) : string.Empty;
                return v;
            }
        }
        return "";
    }

    private string GetCarUrlKey(ScrapedCar car)
    {
        if (!string.IsNullOrWhiteSpace(car.OriginalUrl)) return car.OriginalUrl;
        if (!string.IsNullOrWhiteSpace(car.ListingUrl)) return car.ListingUrl;
        return "";
    }

    private List<ScrapedCar> ConvertScrapedCarsToInternalFormat(List<ScrapedCar> apiCars, Client client)
    {
        var converted = new List<ScrapedCar>();
        foreach (var apiCar in apiCars)
        {
            apiCar.ClientId = client.Id;
            if (string.IsNullOrEmpty(apiCar.Id))
            {
                apiCar.Id = Guid.NewGuid().ToString();
            }
            apiCar.DataSource = client.DataSource;
            if (string.IsNullOrEmpty(apiCar.ListingUrl))
            {
                apiCar.ListingUrl = client.DealerUrl;
            }
            apiCar.ScrapedAt = DateTime.UtcNow;
            converted.Add(apiCar);
        }
        return converted;
    }

    private string GetInventoryTypeForDataSource(string dataSource, string vehicleFilter)
    {
        return vehicleFilter switch
        {
            "New Only" => "NEW",
            "Used Only" => "USED",
            "Both" => "ALL",
            _ => "ALL"
        };
    }

    private void StartIterativeReview()
    {
        reviewMode = "iterative";
        currentChangeIndex = 0;
        _isNextButtonEnabled = IsCurrentCarMetadataComplete();
        _isContinueToSaveEnabled = IsAllRequiredMetadataFilled();
        StateHasChanged();
    }



    private async Task PreviousChange()
    {
        if (currentChangeIndex > 0)
        {
            currentChangeIndex--;
            _isNextButtonEnabled = IsCurrentCarMetadataComplete();
            _isContinueToSaveEnabled = IsAllRequiredMetadataFilled();
            StateHasChanged();
            await ScrollToCarSection();
        }
    }

    private async Task NextChange()
    {
        if (currentChangeIndex < allChanges.Count - 1)
        {
            currentChangeIndex++;
            _isNextButtonEnabled = IsCurrentCarMetadataComplete();
            _isContinueToSaveEnabled = IsAllRequiredMetadataFilled();
            StateHasChanged();
            await ScrollToCarSection();
        }
    }

    private async Task ScrollToCarSection()
    {
        try
        {
            await Task.Delay(100); // Small delay to ensure DOM has updated
            await JSRuntime.InvokeVoidAsync("eval", @"
                const element = document.getElementById('current-car-section');
                if (element) {
                    element.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to car section: {ex.Message}");
        }
    }



    private async Task ApplyChanges()
    {
        if (selectedClient == null)
        {
            return;
        }

        isSaving = true;
        isSaved = false;
        saveMessage = "";
        saveMessageType = "";
        int skippedUpdates = 0;
        try
        {
            // Apply meta overrides to new vehicles if present before adding
            foreach (var car in newVehicles)
            {
                var meta = TryGetVehicleMeta(car.Id, car);
                if (meta != null)
                {
                    car.ExteriorColor = string.IsNullOrWhiteSpace(meta.ExteriorColor) ? car.ExteriorColor : meta.ExteriorColor;
                    car.InteriorColor = string.IsNullOrWhiteSpace(meta.InteriorColor) ? car.InteriorColor : meta.InteriorColor;
                    car.BodyStyle = string.IsNullOrWhiteSpace(meta.BodyStyle) ? car.BodyStyle : meta.BodyStyle;
                }
            }
            // Adds
            if (newVehicles.Count > 0)
            {
                await InventoryService.SaveCarsToClientInventoryAsync(selectedClient.Id, newVehicles);
            }

            // Price/photo updates
            foreach (var (oldCar, newCar) in priceChanges)
            {
                // Only update if there's actually a price difference
                if (Math.Abs(newCar.Price - oldCar.Price) > 0.01)
                {
                    // IMPORTANT: Only update the price, preserve all other existing data
                    oldCar.Price = newCar.Price;
                    
                    // Also merge any user-specified metadata changes
                    var meta = TryGetVehicleMeta(oldCar.Id, oldCar);
                    if (meta != null)
                    {
                        if (!string.IsNullOrWhiteSpace(meta.ExteriorColor)) oldCar.ExteriorColor = meta.ExteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.InteriorColor)) oldCar.InteriorColor = meta.InteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.BodyStyle)) oldCar.BodyStyle = meta.BodyStyle;
                    }
                    
                    await InventoryService.UpdateCarInClientInventoryAsync(selectedClient.Id, oldCar);
                }
                else
                {
                    skippedUpdates++;
                    Console.WriteLine($"Skipping price update for {oldCar.FullTitle} - no significant price change");
                }
            }
            foreach (var (oldCar, newCar) in photoChanges)
            {
                // Only update if photos are actually different
                if (!PhotosEqual(oldCar.Images, newCar.Images))
                {
                    // IMPORTANT: Only update the images, preserve all other existing data
                    oldCar.Images = newCar.Images;
                    
                    // Also merge any user-specified metadata changes
                    var meta = TryGetVehicleMeta(oldCar.Id, oldCar);
                    if (meta != null)
                    {
                        if (!string.IsNullOrWhiteSpace(meta.ExteriorColor)) oldCar.ExteriorColor = meta.ExteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.InteriorColor)) oldCar.InteriorColor = meta.InteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.BodyStyle)) oldCar.BodyStyle = meta.BodyStyle;
                    }
                    
                    await InventoryService.UpdateCarInClientInventoryAsync(selectedClient.Id, oldCar);
                }
                else
                {
                    skippedUpdates++;
                    Console.WriteLine($"Skipping photo update for {oldCar.FullTitle} - photos are identical");
                }
            }

            foreach (var (oldCar, newCar) in metadataChanges)
            {
                // Get the user-specified metadata from the editor
                var meta = TryGetVehicleMeta(oldCar.Id, oldCar);
                if (meta != null)
                {
                    // Check if user has actually specified metadata (any non-empty value)
                    bool hasUserSpecifiedMetadata = !string.IsNullOrWhiteSpace(meta.ExteriorColor) ||
                                                   !string.IsNullOrWhiteSpace(meta.InteriorColor) ||
                                                   !string.IsNullOrWhiteSpace(meta.BodyStyle);
                    
                    if (hasUserSpecifiedMetadata)
                    {
                        // IMPORTANT: Update the EXISTING car to preserve all data (selected photos, etc.)
                        // Only update the metadata fields
                        if (!string.IsNullOrWhiteSpace(meta.ExteriorColor)) oldCar.ExteriorColor = meta.ExteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.InteriorColor)) oldCar.InteriorColor = meta.InteriorColor;
                        if (!string.IsNullOrWhiteSpace(meta.BodyStyle)) oldCar.BodyStyle = meta.BodyStyle;
                        
                        await InventoryService.UpdateCarInClientInventoryAsync(selectedClient.Id, oldCar);
                    }
                    else
                    {
                        skippedUpdates++;
                        Console.WriteLine($"Skipping metadata update for {oldCar.FullTitle} - no metadata specified by user");
                    }
                }
                else
                {
                    skippedUpdates++;
                    Console.WriteLine($"Skipping metadata update for {oldCar.FullTitle} - no metadata found");
                }
            }

            // Photo selections (cars that needed photo selection)
            foreach (var carId in selectedPhotos.Keys)
            {
                var car = existingCars.FirstOrDefault(c => c.Id == carId);
                if (car == null)
                {
                    continue;
                }

                var newSelectedPhotos = selectedPhotos.TryGetValue(carId, out var lst) ? lst : new List<string>();
                var currentSelectedPhotos = car.SelectedPhotoUrls ?? new List<string>();

                // Skip when selection hasn't changed (covers: previously selected unchanged, or none before and none now)
                if (SelectedPhotosEqual(newSelectedPhotos, currentSelectedPhotos))
                {
                    skippedUpdates++;
                    Console.WriteLine($"Skipping photo selection update for {car.FullTitle} - selection unchanged");
                    continue;
                }

                // IMPORTANT: Only update selected photos, preserve all other existing data
                car.SelectedPhotoUrls = newSelectedPhotos;
                
                // Also apply any user-specified metadata changes
                var metaSel = TryGetVehicleMeta(car.Id, car);
                if (metaSel != null)
                {
                    if (!string.IsNullOrWhiteSpace(metaSel.ExteriorColor)) car.ExteriorColor = metaSel.ExteriorColor;
                    if (!string.IsNullOrWhiteSpace(metaSel.InteriorColor)) car.InteriorColor = metaSel.InteriorColor;
                    if (!string.IsNullOrWhiteSpace(metaSel.BodyStyle)) car.BodyStyle = metaSel.BodyStyle;
                }
                
                await InventoryService.UpdateCarInClientInventoryAsync(selectedClient.Id, car);
            }

            // Deletions (sold)
            foreach (var car in soldVehicles)
            {
                // Use the Firestore document ID for deletions
                await InventoryService.DeleteCarFromClientInventoryAsync(selectedClient.Id, car.Id);
            }

            // Update client's UpdatedAt
            selectedClient.UpdatedAt = DateTime.UtcNow;
            await ClientService.UpdateClientAsync(selectedClient);

            // Done
            isSaving = false;
            isSaved = true;
            saveMessageType = "success";
            saveMessage = "Changes saved successfully.";
            // Keep the summary numbers stable after save
            CaptureSummarySnapshot();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isSaving = false;
            Console.WriteLine($"Error applying changes: {ex.Message}");
            saveMessageType = "error";
            saveMessage = $"Error saving changes: {ex.Message}";
            StateHasChanged();
        }
    }

    private void StartOver()
    {
        currentStep = 1;
        selectedClientId = "";
        selectedClient = null;
        isSaving = false;
        isSaved = false;
        saveMessage = "";
        saveMessageType = "";
        hasRefreshed = false;
        summaryNewVehicles = 0;
        summarySoldVehicles = 0;
        summaryPriceUpdates = 0;
        summaryPhotoUpdates = 0;
        summaryMetadataUpdates = 0;
        summarySelectionUpdates = 0;
        scrapedNow.Clear();
        existingCars.Clear();
        newVehicles.Clear();
        soldVehicles.Clear();
        priceChanges.Clear();
        photoChanges.Clear();
        metadataChanges.Clear();
        allChanges.Clear();
        currentChangeIndex = 0;
        reviewMode = "summary";
        selectedPhotos.Clear();
        vehicleMetaByCarId.Clear();

        StateHasChanged();
    }

    private void NavigateToTlpExport()
    {
        var query = string.IsNullOrWhiteSpace(selectedClientId) ? "" : $"?clientId={Uri.EscapeDataString(selectedClientId)}";
        NavigationManager.NavigateTo($"/tlp-export{query}");
    }

    // Helper methods
    private List<SummaryCard.DetailItem> GetClientSummaryDetails(Client client)
    {
        var refreshedToday = client.UpdatedAt.Date == DateTime.UtcNow.Date;

        return new List<SummaryCard.DetailItem>
{
new SummaryCard.DetailItem
{
Label = "Last Updated",
Value = client.UpdatedAt.ToString("MMM dd, yyyy HH:mm 'UTC'")
},
new SummaryCard.DetailItem
{
Label = "Status",
Value = refreshedToday ? "Refreshed Today" : "Needs Refresh"
}
};
    }

    // Photo selection methods
    private void OnSelectedPhotosChanged(Dictionary<string, List<string>> updatedSelectedPhotos)
    {
        selectedPhotos = updatedSelectedPhotos;
        StateHasChanged();
    }

    private void OnMetadataChanged()
    {
        // Recalculate button enabled states
        _isNextButtonEnabled = IsCurrentCarMetadataComplete();
        _isContinueToSaveEnabled = IsAllRequiredMetadataFilled();
        // Force synchronous re-render to ensure button states update immediately
        StateHasChanged();
    }

    private int GetPhotoSelectionChangesCount()
    {
        int changes = 0;
        foreach (var car in existingCars)
        {
            var carId = car.Id;
            if (string.IsNullOrWhiteSpace(carId))
                continue;

            var currentSelected = car.SelectedPhotoUrls ?? new List<string>();
            var newSelected = selectedPhotos.TryGetValue(carId, out var list) ? list : new List<string>();

            if (!SelectedPhotosEqual(newSelected, currentSelected))
            {
                changes++;
            }
        }
        return changes;
    }

    private int GetMetadataChangesCount()
    {
        int changes = 0;
        foreach (var (oldCar, newCar) in metadataChanges)
        {
            var meta = TryGetVehicleMeta(oldCar.Id, oldCar);
            if (meta != null)
            {
                // Check if user has actually specified metadata (any non-empty value)
                bool hasUserSpecifiedMetadata = !string.IsNullOrWhiteSpace(meta.ExteriorColor) ||
                                               !string.IsNullOrWhiteSpace(meta.InteriorColor) ||
                                               !string.IsNullOrWhiteSpace(meta.BodyStyle);
                
                if (hasUserSpecifiedMetadata)
                {
                    changes++;
                }
            }
        }
        return changes;
    }

    private bool IsCurrentCarMetadataComplete()
    {
        // If we're not in iterative review mode, or no changes, always allow navigation
        if (reviewMode != "iterative" || allChanges.Count == 0 || currentChangeIndex >= allChanges.Count)
            return true;

        var currentChange = allChanges[currentChangeIndex];
        
        // Only check metadata for "Metadata Change" type cars
        if (currentChange.ChangeType != "Metadata Change")
            return true; // Allow navigation for non-metadata changes

        // Find the car using the SAME logic as display (prefer scraped, fallback to existing)
        var car = scrapedNow.FirstOrDefault(c => GetCarUrlKey(c) == currentChange.Url)
               ?? existingCars.FirstOrDefault(c => GetCarUrlKey(c) == currentChange.Url);
        if (car == null)
            return true; // Can't find car, allow navigation

        var meta = TryGetVehicleMeta(car.Id, car);
        if (meta == null)
            return false; // No metadata, block navigation

        // All three fields must be filled
        bool isComplete = !string.IsNullOrWhiteSpace(meta.ExteriorColor) &&
                          !string.IsNullOrWhiteSpace(meta.InteriorColor) &&
                          !string.IsNullOrWhiteSpace(meta.BodyStyle);

        return isComplete;
    }

    private bool IsAllRequiredMetadataFilled()
    {
        // Check all cars that need metadata (metadataChanges)
        foreach (var (oldCar, newCar) in metadataChanges)
        {
            // Find the car using the SAME logic as display (prefer scraped, fallback to existing)
            var urlKey = GetCarUrlKey(oldCar);
            var car = scrapedNow.FirstOrDefault(c => GetCarUrlKey(c) == urlKey)
                   ?? existingCars.FirstOrDefault(c => GetCarUrlKey(c) == urlKey);
            
            if (car == null)
                continue; // Skip if car not found
                
            var meta = TryGetVehicleMeta(car.Id, car);
            if (meta == null)
                return false;

            // All three fields are REQUIRED
            if (string.IsNullOrWhiteSpace(meta.ExteriorColor))
                return false;

            if (string.IsNullOrWhiteSpace(meta.InteriorColor))
                return false;

            if (string.IsNullOrWhiteSpace(meta.BodyStyle))
                return false;
        }

        return true; // All cars have complete metadata
    }

    private List<string> GetCarsWithIncompleteMetadata()
    {
        var incompleteCars = new List<string>();
        
        foreach (var (oldCar, newCar) in metadataChanges)
        {
            // Find the car using the SAME logic as display (prefer scraped, fallback to existing)
            var urlKey = GetCarUrlKey(oldCar);
            var car = scrapedNow.FirstOrDefault(c => GetCarUrlKey(c) == urlKey)
                   ?? existingCars.FirstOrDefault(c => GetCarUrlKey(c) == urlKey);
            
            if (car == null)
                continue; // Skip if car not found
                
            var meta = TryGetVehicleMeta(car.Id, car);
            if (meta == null || 
                string.IsNullOrWhiteSpace(meta.ExteriorColor) ||
                string.IsNullOrWhiteSpace(meta.InteriorColor) ||
                string.IsNullOrWhiteSpace(meta.BodyStyle))
            {
                incompleteCars.Add(car.FullTitle);
            }
        }

        return incompleteCars;
    }

    private void CaptureSummarySnapshot()
    {
        summaryNewVehicles = newVehicles.Count;
        summarySoldVehicles = soldVehicles.Count;
        summaryPriceUpdates = priceChanges.Count;
        summaryPhotoUpdates = photoChanges.Count;
        summaryMetadataUpdates = GetMetadataChangesCount();
        summarySelectionUpdates = GetPhotoSelectionChangesCount();
    }

    // Helper methods for change display
    private string GetChangeCardClass(string changeType)
    {
        return changeType switch
        {
            "Sold Vehicle" => "change-card-remove",
            "New Vehicle" => "change-card-add",
            "Price Change" => "change-card-update",
            "Photo Change" => "change-card-update",
            "Metadata Change" => "change-card-select",
            "Photo Selection Needed" => "change-card-select",
            _ => ""
        };
    }

    private string GetChangeHeaderClass(string changeType)
    {
        return changeType switch
        {
            "Sold Vehicle" => "change-header-remove",
            "New Vehicle" => "change-header-add",
            "Price Change" => "change-header-update",
            "Photo Change" => "change-header-update",
            "Metadata Change" => "change-header-select",
            "Photo Selection Needed" => "change-header-select",
            _ => ""
        };
    }

    private string GetChangeIconClass(string changeType)
    {
        return changeType switch
        {
            "Sold Vehicle" => "oi oi-x text-danger",
            "New Vehicle" => "oi oi-plus text-success",
            "Price Change" => "oi oi-dollar text-warning",
            "Photo Change" => "oi oi-image text-warning",
            "Metadata Change" => "oi oi-brush text-info",
            "Photo Selection Needed" => "oi oi-camera text-info",
            _ => "oi oi-info"
        };
    }
}

@code {
    private class ChangeItem
    {
        public string ChangeType { get; set; } = ""; // New Vehicle, Sold Vehicle, Price Change, Photo Change, Metadata Change
        public string Title { get; set; } = "";
        public string Url { get; set; } = "";
        public double? OldPrice { get; set; }
        public double? NewPrice { get; set; }
        public List<string>? OldPhotos { get; set; }
        public List<string>? NewPhotos { get; set; }
        public string? OldExteriorColor { get; set; }
        public string? NewExteriorColor { get; set; }
        public string? OldInteriorColor { get; set; }
        public string? NewInteriorColor { get; set; }
        public string? OldBodyStyle { get; set; }
        public string? NewBodyStyle { get; set; }

        public static ChangeItem NewVehicle(ScrapedCar car)
        {
            return new ChangeItem
            {
                ChangeType = "New Vehicle",
                Title = car.FullTitle,
                Url = string.IsNullOrWhiteSpace(car.OriginalUrl) ? car.ListingUrl : car.OriginalUrl
            };
        }

        public static ChangeItem SoldVehicle(ScrapedCar car)
        {
            return new ChangeItem
            {
                ChangeType = "Sold Vehicle",
                Title = car.FullTitle,
                Url = string.IsNullOrWhiteSpace(car.OriginalUrl) ? car.ListingUrl : car.OriginalUrl
            };
        }

        public static ChangeItem PriceChange(ScrapedCar oldCar, ScrapedCar newCar)
        {
            return new ChangeItem
            {
                ChangeType = "Price Change",
                Title = newCar.FullTitle,
                Url = string.IsNullOrWhiteSpace(newCar.OriginalUrl) ? newCar.ListingUrl : newCar.OriginalUrl,
                OldPrice = oldCar.Price,
                NewPrice = newCar.Price
            };
        }

        public static ChangeItem PhotoChange(ScrapedCar oldCar, ScrapedCar newCar)
        {
            return new ChangeItem
            {
                ChangeType = "Photo Change",
                Title = newCar.FullTitle,
                Url = string.IsNullOrWhiteSpace(newCar.OriginalUrl) ? newCar.ListingUrl : newCar.OriginalUrl,
                OldPhotos = oldCar.Images,
                NewPhotos = newCar.Images
            };
        }

        public static ChangeItem PhotoSelectionNeeded(ScrapedCar car)
        {
            return new ChangeItem
            {
                ChangeType = "Photo Selection Needed",
                Title = car.FullTitle,
                Url = string.IsNullOrWhiteSpace(car.OriginalUrl) ? car.ListingUrl : car.OriginalUrl,
                OldPhotos = car.Images,
                NewPhotos = car.Images
            };
        }

        public static ChangeItem MetadataChange(ScrapedCar oldCar, ScrapedCar newCar)
        {
            return new ChangeItem
            {
                ChangeType = "Metadata Change",
                Title = newCar.FullTitle,
                Url = string.IsNullOrWhiteSpace(newCar.OriginalUrl) ? newCar.ListingUrl : newCar.OriginalUrl,
                OldExteriorColor = oldCar.ExteriorColor,
                NewExteriorColor = newCar.ExteriorColor,
                OldInteriorColor = oldCar.InteriorColor,
                NewInteriorColor = newCar.InteriorColor,
                OldBodyStyle = oldCar.BodyStyle,
                NewBodyStyle = newCar.BodyStyle
            };
        }
    }
}

@code {
    [Inject] private VehicleMetaMapper MetaMapper { get; set; } = new VehicleMetaMapper();

    private VehicleMeta GetVehicleMeta(ScrapedCar car)
    {
        var id = car.Id;
        if (string.IsNullOrWhiteSpace(id))
        {
            id = car.Id = string.IsNullOrEmpty(car.Id) ? Guid.NewGuid().ToString() : car.Id;
        }
        if (!vehicleMetaByCarId.TryGetValue(id, out var meta))
        {
            // Create new meta from the car (which has fresh scraped color data)
            meta = MetaMapper.MapFromCar(car);
            vehicleMetaByCarId[id] = meta;
        }
        else
        {
            // Meta already exists (from InitializeVehicleMetaFromExisting)
            // If it's empty, populate it with intelligent guesses from the current car's data
            if (string.IsNullOrWhiteSpace(meta.ExteriorColor) && !string.IsNullOrWhiteSpace(car.ExteriorColor))
                meta.ExteriorColor = MetaMapper.MapColor(car.ExteriorColor);
            
            if (string.IsNullOrWhiteSpace(meta.InteriorColor) && !string.IsNullOrWhiteSpace(car.InteriorColor))
                meta.InteriorColor = MetaMapper.MapColor(car.InteriorColor);
            
            if (string.IsNullOrWhiteSpace(meta.BodyStyle) && !string.IsNullOrWhiteSpace(car.BodyStyle))
                meta.BodyStyle = MetaMapper.MapBodyStyle(car.BodyStyle);
        }
        return meta;
    }

    private VehicleMeta? TryGetVehicleMeta(string carId, ScrapedCar fallbackCar)
    {
        if (string.IsNullOrWhiteSpace(carId)) return null;
        if (vehicleMetaByCarId.TryGetValue(carId, out var meta)) return meta;
        if (fallbackCar != null)
        {
            var constructed = MetaMapper.MapFromCar(fallbackCar);
            vehicleMetaByCarId[carId] = constructed;
            return constructed;
        }
        return null;
    }
}
